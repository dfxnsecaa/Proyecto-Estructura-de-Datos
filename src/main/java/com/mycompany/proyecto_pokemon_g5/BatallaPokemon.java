/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.proyecto_pokemon_g5;

import static com.mycompany.proyecto_pokemon_g5.PokemonCPU.AGUA;
import static com.mycompany.proyecto_pokemon_g5.PokemonCPU.FUEGO;
import static com.mycompany.proyecto_pokemon_g5.PokemonCPU.NORMAL;
import java.awt.Image;
import java.math.MathContext;
import java.time.Clock;
import javax.swing.ImageIcon;
import javax.swing.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.IOException;
import javax.sound.sampled.AudioInputStream;
import javax.sound.sampled.AudioSystem;
import javax.sound.sampled.Clip;
import javax.sound.sampled.FloatControl;
import javax.sound.sampled.LineUnavailableException;
import javax.sound.sampled.UnsupportedAudioFileException;

public class BatallaPokemon extends javax.swing.JFrame {

    //audio al iniciar 
    //Temporizador
    private Timer timer;

    
    //Turnos habilidades especiales
    int ataqueEspCooldown = 0;
    int defensaEspCooldown = 0;

    //LISTA PARA EL JUGADOR 
    ListaJugador listaJugador = new ListaJugador();
    int contadorPokemonJugador = 0; //contador para medir la lista del jugador

    //Variables temporales, Variables para pokemon Actual del Jugador
    int numeroBoton = 0;

    //LISTA PARA EL CPU
    ListaCPU listaCPU = new ListaCPU();

    //int contadorPokemonCPU = 8;//contador para medir la lista del cpu empieza de 8 para que elimine
    public BatallaPokemon() {
        initComponents();
        this.setLocationRelativeTo(null);
        this.panelAtaques.setVisible(false);
        this.panelPokedex.setVisible(false);
        this.panelSeleccionPokemon.setVisible(false);
        this.botonInicioBatalla.setVisible(false);
        //Ocultar labels Batalla
        ocultarLabelsJugador();
        ocultarLabelsCPU();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlFondo = new javax.swing.JPanel();
        lblLaprasCPU = new javax.swing.JLabel();
        lblMagmortarCPU = new javax.swing.JLabel();
        lblCharizardCPU = new javax.swing.JLabel();
        lblBlazikenCPU = new javax.swing.JLabel();
        lblBlastoiseCPU = new javax.swing.JLabel();
        lblGyaradosCPU = new javax.swing.JLabel();
        lblDoduoCPU = new javax.swing.JLabel();
        lblSnorlaxPeleando = new javax.swing.JLabel();
        lblMagmortarPeleando = new javax.swing.JLabel();
        lblArceusCPU = new javax.swing.JLabel();
        lblSnorlaxCPU = new javax.swing.JLabel();
        lblGyaradosPeleando = new javax.swing.JLabel();
        lblBlastoisePeleando = new javax.swing.JLabel();
        lblCharizardPeleando = new javax.swing.JLabel();
        lblBlazikenPeleando = new javax.swing.JLabel();
        lblLaprasPeleando = new javax.swing.JLabel();
        lblDoduoPeleando = new javax.swing.JLabel();
        lblArceusPeleando = new javax.swing.JLabel();
        lblPokeActualCPU = new javax.swing.JLabel();
        lblVidaRestanteCPU = new javax.swing.JLabel();
        lblVidaRestante = new javax.swing.JLabel();
        lblPokeActualJugador = new javax.swing.JLabel();
        botonTexto = new javax.swing.JButton();
        botonInicioBatalla = new javax.swing.JButton();
        lblTexto = new javax.swing.JLabel();
        lblBatalla = new javax.swing.JLabel();
        panelPokedex = new javax.swing.JPanel();
        lblArceus = new javax.swing.JLabel();
        BotonArceus = new javax.swing.JButton();
        BotonSnorlax = new javax.swing.JButton();
        BotonGyarados = new javax.swing.JButton();
        lblSnorlax = new javax.swing.JLabel();
        lblGyarados = new javax.swing.JLabel();
        mostrarPokedex = new javax.swing.JButton();
        lblBlastoise = new javax.swing.JLabel();
        lblLapras = new javax.swing.JLabel();
        lblCharizard = new javax.swing.JLabel();
        lblBlaziken = new javax.swing.JLabel();
        lblMagmortar = new javax.swing.JLabel();
        lblDoduo = new javax.swing.JLabel();
        BotonDoduo = new javax.swing.JButton();
        BotonBlastoise = new javax.swing.JButton();
        BotonLapras = new javax.swing.JButton();
        BotonMagmortar = new javax.swing.JButton();
        BotonCharizard = new javax.swing.JButton();
        BotonBlaziken = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        lblBlazikenimg = new javax.swing.JLabel();
        lblArceusimg = new javax.swing.JLabel();
        lblSnorlaximg = new javax.swing.JLabel();
        lblDoduoimg = new javax.swing.JLabel();
        lblGyaradosimg = new javax.swing.JLabel();
        lblMagmotarimg = new javax.swing.JLabel();
        lblCharizardimg = new javax.swing.JLabel();
        lblBlastoiseimg = new javax.swing.JLabel();
        lblLaprasimg = new javax.swing.JLabel();
        panelAtaques = new javax.swing.JPanel();
        btnAtaque = new javax.swing.JButton();
        btnAtaqueEspecial = new javax.swing.JButton();
        btnDefensa = new javax.swing.JButton();
        btnDefensaEspecial = new javax.swing.JButton();
        btnCambiarPokemon = new javax.swing.JButton();
        panelSeleccionPokemon = new javax.swing.JPanel();
        lblPokemon1 = new javax.swing.JLabel();
        lblPokemon4 = new javax.swing.JLabel();
        lblPokemon3 = new javax.swing.JLabel();
        lblPokemon2 = new javax.swing.JLabel();
        btnPokemonJ1 = new javax.swing.JButton();
        btnPokemonJ2 = new javax.swing.JButton();
        btnPokemonJ3 = new javax.swing.JButton();
        btnPokemonJ4 = new javax.swing.JButton();
        lblVidaP1 = new javax.swing.JLabel();
        lblVidaP2 = new javax.swing.JLabel();
        lblVidaP3 = new javax.swing.JLabel();
        lblVidaP4 = new javax.swing.JLabel();
        lblFotoPoke1 = new javax.swing.JLabel();
        lblFotoPoke2 = new javax.swing.JLabel();
        lblFotoPoke3 = new javax.swing.JLabel();
        lblFotoPoke4 = new javax.swing.JLabel();
        botonSalirSeleccion = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(153, 153, 255));

        pnlFondo.setToolTipText("");
        pnlFondo.setLayout(null);
        pnlFondo.add(lblLaprasCPU);
        lblLaprasCPU.setBounds(390, 20, 0, 0);

        lblMagmortarCPU.setToolTipText("");
        pnlFondo.add(lblMagmortarCPU);
        lblMagmortarCPU.setBounds(370, 10, 0, 0);
        pnlFondo.add(lblCharizardCPU);
        lblCharizardCPU.setBounds(370, 20, 270, 190);
        pnlFondo.add(lblBlazikenCPU);
        lblBlazikenCPU.setBounds(350, -20, 0, 0);
        pnlFondo.add(lblBlastoiseCPU);
        lblBlastoiseCPU.setBounds(350, 0, 200, 200);
        pnlFondo.add(lblGyaradosCPU);
        lblGyaradosCPU.setBounds(340, 10, 240, 190);
        pnlFondo.add(lblDoduoCPU);
        lblDoduoCPU.setBounds(350, 0, 180, 200);
        pnlFondo.add(lblSnorlaxPeleando);
        lblSnorlaxPeleando.setBounds(70, 140, 270, 160);
        pnlFondo.add(lblMagmortarPeleando);
        lblMagmortarPeleando.setBounds(10, 150, 310, 150);
        pnlFondo.add(lblArceusCPU);
        lblArceusCPU.setBounds(400, 0, 0, 220);
        pnlFondo.add(lblSnorlaxCPU);
        lblSnorlaxCPU.setBounds(350, 0, 230, 210);
        pnlFondo.add(lblGyaradosPeleando);
        lblGyaradosPeleando.setBounds(70, 120, 210, 220);
        pnlFondo.add(lblBlastoisePeleando);
        lblBlastoisePeleando.setBounds(80, 140, 0, 170);
        pnlFondo.add(lblCharizardPeleando);
        lblCharizardPeleando.setBounds(110, 130, 180, 180);
        pnlFondo.add(lblBlazikenPeleando);
        lblBlazikenPeleando.setBounds(110, 130, 190, 180);
        pnlFondo.add(lblLaprasPeleando);
        lblLaprasPeleando.setBounds(20, 160, 280, 150);
        pnlFondo.add(lblDoduoPeleando);
        lblDoduoPeleando.setBounds(150, 130, 0, 0);
        pnlFondo.add(lblArceusPeleando);
        lblArceusPeleando.setBounds(70, 140, 0, 0);

        lblPokeActualCPU.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblPokeActualCPU.setText("   ");
        pnlFondo.add(lblPokeActualCPU);
        lblPokeActualCPU.setBounds(40, 60, 100, 30);

        lblVidaRestanteCPU.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        lblVidaRestanteCPU.setText("   ");
        pnlFondo.add(lblVidaRestanteCPU);
        lblVidaRestanteCPU.setBounds(90, 100, 110, 40);

        lblVidaRestante.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        lblVidaRestante.setText("   ");
        pnlFondo.add(lblVidaRestante);
        lblVidaRestante.setBounds(370, 240, 100, 40);

        lblPokeActualJugador.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        pnlFondo.add(lblPokeActualJugador);
        lblPokeActualJugador.setBounds(550, 250, 90, 30);

        botonTexto.setBackground(new java.awt.Color(206, 81, 50));
        botonTexto.setForeground(new java.awt.Color(255, 255, 255));
        botonTexto.setText("Continuar...");
        botonTexto.setBorder(null);
        botonTexto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonTextoActionPerformed(evt);
            }
        });
        pnlFondo.add(botonTexto);
        botonTexto.setBounds(460, 390, 70, 20);

        botonInicioBatalla.setBackground(new java.awt.Color(204, 0, 0));
        botonInicioBatalla.setFont(new java.awt.Font("Stencil", 0, 18)); // NOI18N
        botonInicioBatalla.setForeground(new java.awt.Color(255, 255, 255));
        botonInicioBatalla.setText("Iniciar Batalla");
        botonInicioBatalla.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        botonInicioBatalla.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonInicioBatallaActionPerformed(evt);
            }
        });
        pnlFondo.add(botonInicioBatalla);
        botonInicioBatalla.setBounds(490, 430, 186, 46);

        lblTexto.setBackground(new java.awt.Color(87, 144, 151));
        lblTexto.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        lblTexto.setForeground(new java.awt.Color(255, 255, 255));
        lblTexto.setText("Bienvenido a la batalla, escoge 4 Pokemones para la batalla!");
        lblTexto.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        lblTexto.setOpaque(true);
        pnlFondo.add(lblTexto);
        lblTexto.setBounds(30, 340, 410, 40);
        pnlFondo.add(lblBatalla);
        lblBatalla.setBounds(70, 40, 0, 370);

        panelPokedex.setBackground(new java.awt.Color(204, 0, 0));
        panelPokedex.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        panelPokedex.add(lblArceus, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 10, 54, -1));

        BotonArceus.setFont(new java.awt.Font("Segoe UI Black", 0, 10)); // NOI18N
        BotonArceus.setText("Arceus");
        BotonArceus.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        BotonArceus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonArceusActionPerformed(evt);
            }
        });
        panelPokedex.add(BotonArceus, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 68, 54, -1));

        BotonSnorlax.setFont(new java.awt.Font("Segoe UI Black", 0, 10)); // NOI18N
        BotonSnorlax.setText("Snorlax");
        BotonSnorlax.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        BotonSnorlax.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonSnorlaxActionPerformed(evt);
            }
        });
        panelPokedex.add(BotonSnorlax, new org.netbeans.lib.awtextra.AbsoluteConstraints(92, 68, 50, -1));

        BotonGyarados.setFont(new java.awt.Font("Segoe UI Black", 0, 10)); // NOI18N
        BotonGyarados.setText("Gyarados");
        BotonGyarados.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        BotonGyarados.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonGyaradosActionPerformed(evt);
            }
        });
        panelPokedex.add(BotonGyarados, new org.netbeans.lib.awtextra.AbsoluteConstraints(19, 162, 55, -1));
        panelPokedex.add(lblSnorlax, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 10, -1, -1));
        panelPokedex.add(lblGyarados, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 100, 54, -1));

        mostrarPokedex.setText("MostrarListaJugador");
        mostrarPokedex.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mostrarPokedexActionPerformed(evt);
            }
        });
        panelPokedex.add(mostrarPokedex, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 300, 150, -1));
        panelPokedex.add(lblBlastoise, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 100, -1, -1));
        panelPokedex.add(lblLapras, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 100, -1, -1));
        panelPokedex.add(lblCharizard, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 190, 52, -1));
        panelPokedex.add(lblBlaziken, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 200, 52, -1));
        panelPokedex.add(lblMagmortar, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 190, -1, 50));
        panelPokedex.add(lblDoduo, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 10, -1, 50));

        BotonDoduo.setFont(new java.awt.Font("Segoe UI Black", 0, 10)); // NOI18N
        BotonDoduo.setText("Doduo");
        BotonDoduo.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        BotonDoduo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonDoduoActionPerformed(evt);
            }
        });
        panelPokedex.add(BotonDoduo, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 68, 50, -1));

        BotonBlastoise.setFont(new java.awt.Font("Segoe UI Black", 0, 10)); // NOI18N
        BotonBlastoise.setText("Blastoise");
        BotonBlastoise.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        BotonBlastoise.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonBlastoiseActionPerformed(evt);
            }
        });
        panelPokedex.add(BotonBlastoise, new org.netbeans.lib.awtextra.AbsoluteConstraints(92, 162, -1, -1));

        BotonLapras.setFont(new java.awt.Font("Segoe UI Black", 0, 10)); // NOI18N
        BotonLapras.setText("Lapras");
        BotonLapras.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        BotonLapras.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonLaprasActionPerformed(evt);
            }
        });
        panelPokedex.add(BotonLapras, new org.netbeans.lib.awtextra.AbsoluteConstraints(161, 162, 50, -1));

        BotonMagmortar.setFont(new java.awt.Font("Segoe UI Black", 0, 9)); // NOI18N
        BotonMagmortar.setText("Magmortar");
        BotonMagmortar.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        BotonMagmortar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonMagmortarActionPerformed(evt);
            }
        });
        panelPokedex.add(BotonMagmortar, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 250, -1, -1));

        BotonCharizard.setFont(new java.awt.Font("Segoe UI Black", 0, 10)); // NOI18N
        BotonCharizard.setText("Charizard");
        BotonCharizard.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        BotonCharizard.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonCharizardActionPerformed(evt);
            }
        });
        panelPokedex.add(BotonCharizard, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 250, -1, -1));

        BotonBlaziken.setFont(new java.awt.Font("Segoe UI Black", 0, 10)); // NOI18N
        BotonBlaziken.setText("Blaziken");
        BotonBlaziken.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        BotonBlaziken.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonBlazikenActionPerformed(evt);
            }
        });
        panelPokedex.add(BotonBlaziken, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 250, -1, -1));
        panelPokedex.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, -90, 220, -1));
        panelPokedex.add(lblBlazikenimg, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 200, 50, 40));
        panelPokedex.add(lblArceusimg, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, 50, 40));
        panelPokedex.add(lblSnorlaximg, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 20, 50, 40));
        panelPokedex.add(lblDoduoimg, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 20, 50, 40));
        panelPokedex.add(lblGyaradosimg, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 100, 50, 40));
        panelPokedex.add(lblMagmotarimg, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 200, 50, 40));
        panelPokedex.add(lblCharizardimg, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 200, 50, 40));
        panelPokedex.add(lblBlastoiseimg, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 100, 50, 40));
        panelPokedex.add(lblLaprasimg, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 100, 50, 40));

        panelAtaques.setBackground(new java.awt.Color(0, 0, 0));

        btnAtaque.setText("Ataque");
        btnAtaque.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAtaqueActionPerformed(evt);
            }
        });

        btnAtaqueEspecial.setText("A. Especial");
        btnAtaqueEspecial.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAtaqueEspecialActionPerformed(evt);
            }
        });

        btnDefensa.setText("Defensa");
        btnDefensa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDefensaActionPerformed(evt);
            }
        });

        btnDefensaEspecial.setText("D. Especial");
        btnDefensaEspecial.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDefensaEspecialActionPerformed(evt);
            }
        });

        btnCambiarPokemon.setText("Cambiar Pokemon");
        btnCambiarPokemon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCambiarPokemonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelAtaquesLayout = new javax.swing.GroupLayout(panelAtaques);
        panelAtaques.setLayout(panelAtaquesLayout);
        panelAtaquesLayout.setHorizontalGroup(
            panelAtaquesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelAtaquesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelAtaquesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnCambiarPokemon, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(panelAtaquesLayout.createSequentialGroup()
                        .addGroup(panelAtaquesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnAtaqueEspecial, javax.swing.GroupLayout.DEFAULT_SIZE, 104, Short.MAX_VALUE)
                            .addComponent(btnAtaque, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(panelAtaquesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnDefensa, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnDefensaEspecial, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        panelAtaquesLayout.setVerticalGroup(
            panelAtaquesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelAtaquesLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(panelAtaquesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnAtaque, javax.swing.GroupLayout.DEFAULT_SIZE, 35, Short.MAX_VALUE)
                    .addComponent(btnDefensa, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelAtaquesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnAtaqueEspecial, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE)
                    .addComponent(btnDefensaEspecial, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnCambiarPokemon, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        panelSeleccionPokemon.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lblPokemon1.setForeground(new java.awt.Color(255, 255, 255));
        lblPokemon1.setText("Pokemon 1");
        lblPokemon1.setCursor(new java.awt.Cursor(java.awt.Cursor.WAIT_CURSOR));
        panelSeleccionPokemon.add(lblPokemon1, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 40, 70, 10));

        lblPokemon4.setForeground(new java.awt.Color(255, 255, 255));
        lblPokemon4.setText("Pokemon 4");
        lblPokemon4.setFocusable(false);
        panelSeleccionPokemon.add(lblPokemon4, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 110, 70, 20));

        lblPokemon3.setForeground(new java.awt.Color(255, 255, 255));
        lblPokemon3.setText("Pokemon 3");
        lblPokemon3.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        lblPokemon3.setFocusable(false);
        panelSeleccionPokemon.add(lblPokemon3, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 110, 90, 30));

        lblPokemon2.setForeground(new java.awt.Color(255, 255, 255));
        lblPokemon2.setText("Pokemon 2");
        lblPokemon2.setFocusable(false);
        panelSeleccionPokemon.add(lblPokemon2, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 30, 70, 30));

        btnPokemonJ1.setBackground(new java.awt.Color(0, 102, 0));
        btnPokemonJ1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnPokemonJ1.setFocusable(false);
        btnPokemonJ1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPokemonJ1ActionPerformed(evt);
            }
        });
        panelSeleccionPokemon.add(btnPokemonJ1, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 30, 140, 30));

        btnPokemonJ2.setBackground(new java.awt.Color(0, 102, 0));
        btnPokemonJ2.setFocusable(false);
        btnPokemonJ2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPokemonJ2ActionPerformed(evt);
            }
        });
        panelSeleccionPokemon.add(btnPokemonJ2, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 30, 140, 30));

        btnPokemonJ3.setBackground(new java.awt.Color(0, 102, 0));
        btnPokemonJ3.setFocusable(false);
        btnPokemonJ3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPokemonJ3ActionPerformed(evt);
            }
        });
        panelSeleccionPokemon.add(btnPokemonJ3, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 110, 140, 30));

        btnPokemonJ4.setBackground(new java.awt.Color(0, 102, 0));
        btnPokemonJ4.setFocusable(false);
        btnPokemonJ4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPokemonJ4ActionPerformed(evt);
            }
        });
        panelSeleccionPokemon.add(btnPokemonJ4, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 110, 140, 30));

        lblVidaP1.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        lblVidaP1.setText("Vida: ");
        panelSeleccionPokemon.add(lblVidaP1, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 70, 80, -1));

        lblVidaP2.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        lblVidaP2.setText("Vida: ");
        panelSeleccionPokemon.add(lblVidaP2, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 70, 90, 20));

        lblVidaP3.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        lblVidaP3.setText("Vida: ");
        panelSeleccionPokemon.add(lblVidaP3, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 150, 100, 30));

        lblVidaP4.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        lblVidaP4.setText("Vida: ");
        panelSeleccionPokemon.add(lblVidaP4, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 150, 90, -1));
        panelSeleccionPokemon.add(lblFotoPoke1, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 20, 50, 50));
        panelSeleccionPokemon.add(lblFotoPoke2, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 40, 50, 50));
        panelSeleccionPokemon.add(lblFotoPoke3, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 120, 50, 50));
        panelSeleccionPokemon.add(lblFotoPoke4, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 130, 50, 50));

        botonSalirSeleccion.setBackground(new java.awt.Color(0, 0, 0));
        botonSalirSeleccion.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        botonSalirSeleccion.setForeground(new java.awt.Color(255, 255, 255));
        botonSalirSeleccion.setText("SALIR");
        botonSalirSeleccion.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        botonSalirSeleccion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonSalirSeleccionActionPerformed(evt);
            }
        });
        panelSeleccionPokemon.add(botonSalirSeleccion, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 220, 120, 60));
        panelSeleccionPokemon.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 0, 490, -1));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(panelSeleccionPokemon, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(pnlFondo, javax.swing.GroupLayout.PREFERRED_SIZE, 687, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(panelPokedex, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(panelAtaques, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(44, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(panelAtaques, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(panelPokedex, javax.swing.GroupLayout.PREFERRED_SIZE, 342, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(pnlFondo, javax.swing.GroupLayout.PREFERRED_SIZE, 484, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelSeleccionPokemon, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(36, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    //LISTA RANDOM PARA EL CPU


    private void BotonArceusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonArceusActionPerformed
        listaJugador.insertarListaJugador(new Pokemon(Pokemon.NORMAL, "Arceus", 150, 50, 35, 70, 60));
        this.BotonArceus.setVisible(false);
        this.lblArceus.setVisible(false);
        contadorPokemonJugador++;
        if (contadorPokemonJugador == 1) {
            lblTexto.setText("Arceus agregado a la batalla.  Tienes un Pokemon en la pokedex. (Escoge 3 Pokemones mas )");
        } else if (contadorPokemonJugador == 2) {
            lblTexto.setText("Arceus agregado a la batalla.  Tienes dos Pokemon en la pokedex. (Escoge 2 Pokemones mas )");
        } else if (contadorPokemonJugador == 3) {
            lblTexto.setText("Arceus agregado a la batalla.  Tienes tres Pokemon en la pokedex. (Escoge 1 Pokemon mas )");
        } else if (contadorPokemonJugador == 4) {
            lblTexto.setText("Arceus agregado a la batalla, Pokedex Completa");
            this.botonInicioBatalla.setVisible(true);
            ocultarPokedex();
        }
    }//GEN-LAST:event_BotonArceusActionPerformed

    private void BotonSnorlaxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonSnorlaxActionPerformed

        listaJugador.insertarListaJugador(new Pokemon(Pokemon.NORMAL, "Snorlax", 150, 50, 35, 70, 60));
        this.BotonSnorlax.setVisible(false);
        this.lblSnorlax.setVisible(false);
        contadorPokemonJugador++;
        if (contadorPokemonJugador == 1) {
            lblTexto.setText("Snorlax agregado a la batalla.  Tienes un Pokemon en la pokedex. (Escoge 3 Pokemones mas )");
        } else if (contadorPokemonJugador == 2) {
            lblTexto.setText("Snorlax agregado a la batalla.  Tienes dos Pokemon en la pokedex. (Escoge 2 Pokemones mas )");
        } else if (contadorPokemonJugador == 3) {
            lblTexto.setText("Snorlax agregado a la batalla.  Tienes tres Pokemon en la pokedex. (Escoge 1 Pokemon mas )");
        } else if (contadorPokemonJugador == 4) {
            lblTexto.setText("Snorlax agregado a la batalla, Pokedex Completa");
            this.botonInicioBatalla.setVisible(true);
            ocultarPokedex();

        }
    }//GEN-LAST:event_BotonSnorlaxActionPerformed

    private void BotonGyaradosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonGyaradosActionPerformed

        listaJugador.insertarListaJugador(new Pokemon(Pokemon.AGUA, "Gyarados", 190, 55, 45, 75, 65));
        this.BotonGyarados.setVisible(false);
        this.lblGyarados.setVisible(false);
        contadorPokemonJugador++;
        if (contadorPokemonJugador == 1) {
            lblTexto.setText("Gyarados agregado a la batalla.  Tienes un Pokemon en la pokedex. (Escoge 3 Pokemones mas )");
        } else if (contadorPokemonJugador == 2) {
            lblTexto.setText("Gyarados agregado a la batalla.  Tienes dos Pokemon en la pokedex. (Escoge 2 Pokemones mas )");
        } else if (contadorPokemonJugador == 3) {
            lblTexto.setText("Gyarados agregado a la batalla.  Tienes tres Pokemon en la pokedex. (Escoge 1 Pokemon mas )");
        } else if (contadorPokemonJugador == 4) {
            lblTexto.setText("Gyarados agregado a la batalla, Pokedex Completa");
            this.botonInicioBatalla.setVisible(true);
            ocultarPokedex();
        }
    }//GEN-LAST:event_BotonGyaradosActionPerformed

    private void btnAtaqueEspecialActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAtaqueEspecialActionPerformed

        if (defensaEspCooldown == 2 || defensaEspCooldown == 1) {
            btnDefensaEspecial.setVisible(false);
            defensaEspCooldown--;
        } else if (defensaEspCooldown == 0) {
            btnDefensaEspecial.setVisible(true);
        }
        ataqueEspCooldown = 2;
        if (ataqueEspCooldown == 2) {
            btnAtaqueEspecial.setVisible(false);
        }
        // DAÑO EN CASO DE HACER COUNTER
        if (numeroBoton == 1) {
            if (listaJugador.cabeza.getPokemon().getTipo() == AGUA && listaCPU.cabeza.getPokemon().getTipo() == FUEGO) {
                String vidaLabel;
                System.out.println("cabeza: ");
                System.out.println(listaCPU.cabeza.getPokemon().getNombreP());
                String nombrePokemonCPU = listaCPU.cabeza.getPokemon().getNombreP();
                int vidaP1CPU = listaCPU.cabeza.getPokemon().getHitPoints();
                String vidaP1StrCPU = String.valueOf(vidaP1CPU);
                int HP = listaCPU.cabeza.getPokemon().getHitPoints() - listaJugador.cabeza.getPokemon().getAtaqueEspecial() + 10;
                vidaLabel = String.valueOf(HP);
                lblVidaRestanteCPU.setText(vidaLabel + " HP");
                //panelAtaques.setVisible(false);
                panelSeleccionPokemon.setVisible(false);
                lblTexto.setText(nombrePokemonCPU + " ha recibido: " + listaJugador.cabeza.getPokemon().getAtaqueEspecial()  + " del ataque especial");
                listaCPU.cabeza.getPokemon().setHitPoints(HP);
                //si el ataque mata al Pokemon, borrelo de la lista y traiga al nuevo
                if (listaCPU.cabeza.getPokemon().getHitPoints() <= 0) {
                    //ocultamos los labels
                    ocultarLabelsCPU();
                    //esperarSegundos(2000,nombrePokemonCPU + " ha sido eliminado");
                    lblTexto.setText(nombrePokemonCPU + " ha sido eliminado"); //setear en 2 segundos para que sea visible.
                    lblPokeActualCPU.setText("0");
                    if (listaCPU.cabeza.next != null) {
                        listaCPU.eliminarMuerto();
                        listaCPU.cabeza.getPokemon().setIndice(0);//seteamos el indice en cabeza
                        mostrarLabelCabezaCPU(); //cambiamos el label y lo mostramos
                        System.out.println("\nlista cabeza \n");
                        listaCPU.mostrar();// para llevar un orden en consola
                        // esperarSegundos(1000,nombrePokemonCPU + "CPU peleara con: " + listaCPU.cabeza.getPokemon().getNombreP());
                        lblTexto.setText("CPU peleara con: " + listaCPU.cabeza.getPokemon().getNombreP());
                        lblPokeActualCPU.setText(listaCPU.cabeza.getPokemon().getNombreP());
                        lblVidaRestanteCPU.setText(String.valueOf(listaCPU.cabeza.getPokemon().getHitPoints() + " HP"));

                    } else if (listaCPU.cabeza.next == null) {//la batalla se ha ganado
                        listaCPU.eliminarMuerto();
                        //esperarSegundos(1000,"Has vencido a CPU. Ganaste la batalla.");
                        lblTexto.setText("Has vencido a CPU. Ganaste la batalla.");// Eliminamos de la lista a cabeza
                        panelAtaques.setVisible(false);
                        lblVidaRestanteCPU.setVisible(false);
                        lblPokeActualCPU.setVisible(false);
                    }
                }
                habilidadesCPU();
            } else if (listaJugador.cabeza.getPokemon().getTipo() == FUEGO && listaCPU.cabeza.getPokemon().getTipo() == NORMAL
                    || listaJugador.cabeza.getPokemon().getTipo() == NORMAL && listaCPU.cabeza.getPokemon().getTipo() == AGUA) {
                String vidaLabel;
                System.out.println("cabeza: ");
                System.out.println(listaCPU.cabeza.getPokemon().getNombreP());

                String nombrePokemonCPU = listaCPU.cabeza.getPokemon().getNombreP();
                int vidaP1CPU = listaCPU.cabeza.getPokemon().getHitPoints();
                String vidaP1StrCPU = String.valueOf(vidaP1CPU);
                int HP = listaCPU.cabeza.getPokemon().getHitPoints() - listaJugador.cabeza.getPokemon().getAtaqueEspecial() + 5;
                vidaLabel = String.valueOf(HP);
                lblVidaRestanteCPU.setText(vidaLabel + " HP");
                //panelAtaques.setVisible(false);
                panelSeleccionPokemon.setVisible(false);
                lblTexto.setText(nombrePokemonCPU + " ha recibido: " + listaJugador.cabeza.getPokemon().getAtaqueEspecial()  + " del ataque especial");
                listaCPU.cabeza.getPokemon().setHitPoints(HP);
                //si el ataque mata al Pokemon, borrelo de la lista y traiga al nuevo
                if (listaCPU.cabeza.getPokemon().getHitPoints() <= 0) {
                    //ocultamos los labels
                    ocultarLabelsCPU();
                    //esperarSegundos(2000,nombrePokemonCPU + " ha sido eliminado");
                    lblTexto.setText(nombrePokemonCPU + " ha sido eliminado"); //setear en 2 segundos para que sea visible.
                    lblPokeActualCPU.setText("0");
                    if (listaCPU.cabeza.next != null) {
                        listaCPU.eliminarMuerto();
                        listaCPU.cabeza.getPokemon().setIndice(0);//seteamos el indice en cabeza
                        mostrarLabelCabezaCPU(); //cambiamos el label y lo mostramos
                        System.out.println("\nlista cabeza \n");
                        listaCPU.mostrar();// para llevar un orden en consola
                        // esperarSegundos(1000,nombrePokemonCPU + "CPU peleara con: " + listaCPU.cabeza.getPokemon().getNombreP());
                        lblTexto.setText("CPU peleara con: " + listaCPU.cabeza.getPokemon().getNombreP());
                        lblPokeActualCPU.setText(listaCPU.cabeza.getPokemon().getNombreP());
                        lblVidaRestanteCPU.setText(String.valueOf(listaCPU.cabeza.getPokemon().getHitPoints() + " HP"));

                    } else if (listaCPU.cabeza.next == null) {//la batalla se ha ganado
                        listaCPU.eliminarMuerto();
                        //esperarSegundos(1000,"Has vencido a CPU. Ganaste la batalla.");
                        lblTexto.setText("Has vencido a CPU. Ganaste la batalla.");// Eliminamos de la lista a cabeza
                        panelAtaques.setVisible(false);
                        lblVidaRestanteCPU.setVisible(false);
                        lblPokeActualCPU.setVisible(false);
                    }
                }
                habilidadesCPU();
            } else {
                String vidaLabel;
                System.out.println("cabeza: ");
                System.out.println(listaCPU.cabeza.getPokemon().getNombreP());

                String nombrePokemonCPU = listaCPU.cabeza.getPokemon().getNombreP();
                int vidaP1CPU = listaCPU.cabeza.getPokemon().getHitPoints();
                String vidaP1StrCPU = String.valueOf(vidaP1CPU);
                int HP = listaCPU.cabeza.getPokemon().getHitPoints() - listaJugador.cabeza.getPokemon().getAtaqueEspecial();
                vidaLabel = String.valueOf(HP);
                lblVidaRestanteCPU.setText(vidaLabel + " HP");
                //panelAtaques.setVisible(false);
                panelSeleccionPokemon.setVisible(false);
                lblTexto.setText(nombrePokemonCPU + " ha recibido: " + listaJugador.cabeza.getPokemon().getAtaqueEspecial() + " del ataque especial");
                listaCPU.cabeza.getPokemon().setHitPoints(HP);
                //si el ataque mata al Pokemon, borrelo de la lista y traiga al nuevo
                if (listaCPU.cabeza.getPokemon().getHitPoints() <= 0) {
                    //ocultamos los labels
                    ocultarLabelsCPU();
                    //esperarSegundos(2000,nombrePokemonCPU + " ha sido eliminado");
                    lblTexto.setText(nombrePokemonCPU + " ha sido eliminado"); //setear en 2 segundos para que sea visible.
                    lblPokeActualCPU.setText("0");
                    if (listaCPU.cabeza.next != null) {
                        listaCPU.eliminarMuerto();
                        listaCPU.cabeza.getPokemon().setIndice(0);//seteamos el indice en cabeza
                        mostrarLabelCabezaCPU(); //cambiamos el label y lo mostramos
                        System.out.println("\nlista cabeza \n");
                        listaCPU.mostrar();// para llevar un orden en consola
                        // esperarSegundos(1000,nombrePokemonCPU + "CPU peleara con: " + listaCPU.cabeza.getPokemon().getNombreP());
                        lblTexto.setText("CPU peleara con: " + listaCPU.cabeza.getPokemon().getNombreP());
                        lblPokeActualCPU.setText(listaCPU.cabeza.getPokemon().getNombreP());
                        lblVidaRestanteCPU.setText(String.valueOf(listaCPU.cabeza.getPokemon().getHitPoints() + " HP"));

                    } else if (listaCPU.cabeza.next == null) {//la batalla se ha ganado
                        listaCPU.eliminarMuerto();
                        //esperarSegundos(1000,"Has vencido a CPU. Ganaste la batalla.");
                        lblTexto.setText("Has vencido a CPU. Ganaste la batalla.");// Eliminamos de la lista a cabeza
                        panelAtaques.setVisible(false);
                        lblVidaRestanteCPU.setVisible(false);
                        lblPokeActualCPU.setVisible(false);
                    }
                }
                habilidadesCPU();
            }

        } else if (numeroBoton == 2) {
            if (listaJugador.cabeza.next.getPokemon().getTipo() == AGUA && listaCPU.cabeza.getPokemon().getTipo() == FUEGO) {
                String vidaLabel;
                System.out.println("cabeza: ");
                System.out.println(listaCPU.cabeza.getPokemon().getNombreP());
                String nombrePokemonCPU = listaCPU.cabeza.getPokemon().getNombreP();
                int vidaP1CPU = listaCPU.cabeza.getPokemon().getHitPoints();
                String vidaP1StrCPU = String.valueOf(vidaP1CPU);
                int HP = listaCPU.cabeza.getPokemon().getHitPoints() - listaJugador.cabeza.next.getPokemon().getAtaqueEspecial() + 10;
                vidaLabel = String.valueOf(HP);
                lblVidaRestanteCPU.setText(vidaLabel + " HP");
                //panelAtaques.setVisible(false);
                panelSeleccionPokemon.setVisible(false);
                lblTexto.setText(nombrePokemonCPU + " ha recibido: " + listaJugador.cabeza.next.getPokemon().getAtaqueEspecial()  + " del ataque especial");
                listaCPU.cabeza.getPokemon().setHitPoints(HP);
                //si el ataque mata al Pokemon, borrelo de la lista y traiga al nuevo
                if (listaCPU.cabeza.getPokemon().getHitPoints() <= 0) {
                    //ocultamos los labels
                    ocultarLabelsCPU();
                    //esperarSegundos(2000,nombrePokemonCPU + " ha sido eliminado");
                    lblTexto.setText(nombrePokemonCPU + " ha sido eliminado"); //setear en 2 segundos para que sea visible.
                    lblPokeActualCPU.setText("0");
                    if (listaCPU.cabeza.next != null) {
                        listaCPU.eliminarMuerto();
                        listaCPU.cabeza.getPokemon().setIndice(0);//seteamos el indice en cabeza
                        mostrarLabelCabezaCPU(); //cambiamos el label y lo mostramos
                        System.out.println("\nlista cabeza \n");
                        listaCPU.mostrar();// para llevar un orden en consola
                        // esperarSegundos(1000,nombrePokemonCPU + "CPU peleara con: " + listaCPU.cabeza.getPokemon().getNombreP());
                        lblTexto.setText("CPU peleara con: " + listaCPU.cabeza.getPokemon().getNombreP());
                        lblPokeActualCPU.setText(listaCPU.cabeza.getPokemon().getNombreP());
                        lblVidaRestanteCPU.setText(String.valueOf(listaCPU.cabeza.getPokemon().getHitPoints() + " HP"));

                    } else if (listaCPU.cabeza.next == null) {//la batalla se ha ganado
                        listaCPU.eliminarMuerto();
                        //esperarSegundos(1000,"Has vencido a CPU. Ganaste la batalla.");
                        lblTexto.setText("Has vencido a CPU. Ganaste la batalla.");// Eliminamos de la lista a cabeza
                        panelAtaques.setVisible(false);
                        lblVidaRestanteCPU.setVisible(false);
                        lblPokeActualCPU.setVisible(false);
                    }
                }
                habilidadesCPU();
            } else if (listaJugador.cabeza.next.getPokemon().getTipo() == FUEGO && listaCPU.cabeza.getPokemon().getTipo() == NORMAL || listaJugador.cabeza.next.getPokemon().getTipo() == NORMAL && listaCPU.cabeza.getPokemon().getTipo() == AGUA) {
                String vidaLabel;
                System.out.println("cabeza: ");
                System.out.println(listaCPU.cabeza.getPokemon().getNombreP());

                String nombrePokemonCPU = listaCPU.cabeza.getPokemon().getNombreP();
                int vidaP1CPU = listaCPU.cabeza.getPokemon().getHitPoints();
                String vidaP1StrCPU = String.valueOf(vidaP1CPU);
                int HP = listaCPU.cabeza.getPokemon().getHitPoints() - listaJugador.cabeza.next.getPokemon().getAtaqueEspecial() + 5;
                vidaLabel = String.valueOf(HP);
                lblVidaRestanteCPU.setText(vidaLabel + " HP");
                //panelAtaques.setVisible(false);
                panelSeleccionPokemon.setVisible(false);
                lblTexto.setText(nombrePokemonCPU + " ha recibido: " + listaJugador.cabeza.next.getPokemon().getAtaqueEspecial() + " del ataque especial");
                listaCPU.cabeza.getPokemon().setHitPoints(HP);
                //si el ataque mata al Pokemon, borrelo de la lista y traiga al nuevo
                if (listaCPU.cabeza.getPokemon().getHitPoints() <= 0) {
                    //ocultamos los labels
                    ocultarLabelsCPU();
                    //esperarSegundos(2000,nombrePokemonCPU + " ha sido eliminado");
                    lblTexto.setText(nombrePokemonCPU + " ha sido eliminado"); //setear en 2 segundos para que sea visible.
                    lblPokeActualCPU.setText("0");
                    if (listaCPU.cabeza.next != null) {
                        listaCPU.eliminarMuerto();
                        listaCPU.cabeza.getPokemon().setIndice(0);//seteamos el indice en cabeza
                        mostrarLabelCabezaCPU(); //cambiamos el label y lo mostramos
                        System.out.println("\nlista cabeza \n");
                        listaCPU.mostrar();// para llevar un orden en consola
                        // esperarSegundos(1000,nombrePokemonCPU + "CPU peleara con: " + listaCPU.cabeza.getPokemon().getNombreP());
                        lblTexto.setText("CPU peleara con: " + listaCPU.cabeza.getPokemon().getNombreP());
                        lblPokeActualCPU.setText(listaCPU.cabeza.getPokemon().getNombreP());
                        lblVidaRestanteCPU.setText(String.valueOf(listaCPU.cabeza.getPokemon().getHitPoints() + " HP"));

                    } else if (listaCPU.cabeza.next == null) {//la batalla se ha ganado
                        listaCPU.eliminarMuerto();
                        //esperarSegundos(1000,"Has vencido a CPU. Ganaste la batalla.");
                        lblTexto.setText("Has vencido a CPU. Ganaste la batalla.");// Eliminamos de la lista a cabeza
                        panelAtaques.setVisible(false);
                        lblVidaRestanteCPU.setVisible(false);
                        lblPokeActualCPU.setVisible(false);
                    }
                }
                habilidadesCPU();
            } else {
                String vidaLabel;
                System.out.println("cabeza: ");
                System.out.println(listaCPU.cabeza.getPokemon().getNombreP());

                String nombrePokemonCPU = listaCPU.cabeza.getPokemon().getNombreP();
                int vidaP1CPU = listaCPU.cabeza.getPokemon().getHitPoints();
                String vidaP1StrCPU = String.valueOf(vidaP1CPU);
                int HP = listaCPU.cabeza.getPokemon().getHitPoints() - listaJugador.cabeza.next.getPokemon().getAtaqueEspecial() + 5;
                vidaLabel = String.valueOf(HP);
                lblVidaRestanteCPU.setText(vidaLabel + " HP");
                //panelAtaques.setVisible(false);
                panelSeleccionPokemon.setVisible(false);
                lblTexto.setText(nombrePokemonCPU + " ha recibido: " + listaJugador.cabeza.next.getPokemon().getAtaqueEspecial() + " del ataque especial");
                listaCPU.cabeza.getPokemon().setHitPoints(HP);
                //si el ataque mata al Pokemon, borrelo de la lista y traiga al nuevo
                if (listaCPU.cabeza.getPokemon().getHitPoints() <= 0) {
                    //ocultamos los labels
                    ocultarLabelsCPU();
                    //esperarSegundos(2000,nombrePokemonCPU + " ha sido eliminado");
                    lblTexto.setText(nombrePokemonCPU + " ha sido eliminado"); //setear en 2 segundos para que sea visible.
                    lblPokeActualCPU.setText("0");
                    if (listaCPU.cabeza.next != null) {
                        listaCPU.eliminarMuerto();
                        listaCPU.cabeza.getPokemon().setIndice(0);//seteamos el indice en cabeza
                        mostrarLabelCabezaCPU(); //cambiamos el label y lo mostramos
                        System.out.println("\nlista cabeza \n");
                        listaCPU.mostrar();// para llevar un orden en consola
                        // esperarSegundos(1000,nombrePokemonCPU + "CPU peleara con: " + listaCPU.cabeza.getPokemon().getNombreP());
                        lblTexto.setText("CPU peleara con: " + listaCPU.cabeza.getPokemon().getNombreP());
                        lblPokeActualCPU.setText(listaCPU.cabeza.getPokemon().getNombreP());
                        lblVidaRestanteCPU.setText(String.valueOf(listaCPU.cabeza.getPokemon().getHitPoints() + " HP"));

                    } else if (listaCPU.cabeza.next == null) {//la batalla se ha ganado
                        listaCPU.eliminarMuerto();
                        //esperarSegundos(1000,"Has vencido a CPU. Ganaste la batalla.");
                        lblTexto.setText("Has vencido a CPU. Ganaste la batalla.");// Eliminamos de la lista a cabeza
                        panelAtaques.setVisible(false);
                        lblVidaRestanteCPU.setVisible(false);
                        lblPokeActualCPU.setVisible(false);
                    }
                }
                habilidadesCPU();
            }
        } else if (numeroBoton == 3) {
            if (listaJugador.cabeza.next.next.getPokemon().getTipo() == AGUA && listaCPU.cabeza.getPokemon().getTipo() == FUEGO) {
                String vidaLabel;
                System.out.println("cabeza: ");
                System.out.println(listaCPU.cabeza.getPokemon().getNombreP());
                String nombrePokemonCPU = listaCPU.cabeza.getPokemon().getNombreP();
                int vidaP1CPU = listaCPU.cabeza.getPokemon().getHitPoints();
                String vidaP1StrCPU = String.valueOf(vidaP1CPU);
                int HP = listaCPU.cabeza.getPokemon().getHitPoints() - listaJugador.cabeza.next.next.getPokemon().getAtaqueEspecial();
                vidaLabel = String.valueOf(HP);
                lblVidaRestanteCPU.setText(vidaLabel + " HP");
                //panelAtaques.setVisible(false);
                panelSeleccionPokemon.setVisible(false);
                lblTexto.setText(nombrePokemonCPU + " ha recibido: " + listaJugador.cabeza.next.next.getPokemon().getAtaqueEspecial() + " del ataque especial");
                listaCPU.cabeza.getPokemon().setHitPoints(HP);
                //si el ataque mata al Pokemon, borrelo de la lista y traiga al nuevo
                if (listaCPU.cabeza.getPokemon().getHitPoints() <= 0) {
                    //ocultamos los labels
                    ocultarLabelsCPU();
                    //esperarSegundos(2000,nombrePokemonCPU + " ha sido eliminado");
                    lblTexto.setText(nombrePokemonCPU + " ha sido eliminado"); //setear en 2 segundos para que sea visible.
                    lblPokeActualCPU.setText("0");
                    if (listaCPU.cabeza.next != null) {
                        listaCPU.eliminarMuerto();
                        listaCPU.cabeza.getPokemon().setIndice(0);//seteamos el indice en cabeza
                        mostrarLabelCabezaCPU(); //cambiamos el label y lo mostramos
                        System.out.println("\nlista cabeza \n");
                        listaCPU.mostrar();// para llevar un orden en consola
                        // esperarSegundos(1000,nombrePokemonCPU + "CPU peleara con: " + listaCPU.cabeza.getPokemon().getNombreP());
                        lblTexto.setText("CPU peleara con: " + listaCPU.cabeza.getPokemon().getNombreP());
                        lblPokeActualCPU.setText(listaCPU.cabeza.getPokemon().getNombreP());
                        lblVidaRestanteCPU.setText(String.valueOf(listaCPU.cabeza.getPokemon().getHitPoints() + " HP"));

                    } else if (listaCPU.cabeza.next == null) {//la batalla se ha ganado
                        listaCPU.eliminarMuerto();
                        //esperarSegundos(1000,"Has vencido a CPU. Ganaste la batalla.");
                        lblTexto.setText("Has vencido a CPU. Ganaste la batalla.");// Eliminamos de la lista a cabeza
                        panelAtaques.setVisible(false);
                        lblVidaRestanteCPU.setVisible(false);
                        lblPokeActualCPU.setVisible(false);
                    }
                }
                habilidadesCPU();
            } else if (listaJugador.cabeza.next.next.getPokemon().getTipo() == FUEGO && listaCPU.cabeza.getPokemon().getTipo() == NORMAL
                    || listaJugador.cabeza.next.next.getPokemon().getTipo() == NORMAL && listaCPU.cabeza.getPokemon().getTipo() == AGUA) {
                String vidaLabel;
                System.out.println("cabeza: ");
                System.out.println(listaCPU.cabeza.getPokemon().getNombreP());

                String nombrePokemonCPU = listaCPU.cabeza.getPokemon().getNombreP();
                int vidaP1CPU = listaCPU.cabeza.getPokemon().getHitPoints();
                String vidaP1StrCPU = String.valueOf(vidaP1CPU);
                int HP = listaCPU.cabeza.getPokemon().getHitPoints() - listaJugador.cabeza.next.next.getPokemon().getAtaqueEspecial() + 5;
                vidaLabel = String.valueOf(HP);
                lblVidaRestanteCPU.setText(vidaLabel + " HP");
                //panelAtaques.setVisible(false);
                panelSeleccionPokemon.setVisible(false);
                lblTexto.setText(nombrePokemonCPU + " ha recibido: " + listaJugador.cabeza.next.next.getPokemon().getAtaqueEspecial() + " del ataque especial");
                listaCPU.cabeza.getPokemon().setHitPoints(HP);
                //si el ataque mata al Pokemon, borrelo de la lista y traiga al nuevo
                if (listaCPU.cabeza.getPokemon().getHitPoints() <= 0) {
                    //ocultamos los labels
                    ocultarLabelsCPU();
                    //esperarSegundos(2000,nombrePokemonCPU + " ha sido eliminado");
                    lblTexto.setText(nombrePokemonCPU + " ha sido eliminado"); //setear en 2 segundos para que sea visible.
                    lblPokeActualCPU.setText("0");
                    if (listaCPU.cabeza.next != null) {
                        listaCPU.eliminarMuerto();
                        listaCPU.cabeza.getPokemon().setIndice(0);//seteamos el indice en cabeza
                        mostrarLabelCabezaCPU(); //cambiamos el label y lo mostramos
                        System.out.println("\nlista cabeza \n");
                        listaCPU.mostrar();// para llevar un orden en consola
                        // esperarSegundos(1000,nombrePokemonCPU + "CPU peleara con: " + listaCPU.cabeza.getPokemon().getNombreP());
                        lblTexto.setText("CPU peleara con: " + listaCPU.cabeza.getPokemon().getNombreP());
                        lblPokeActualCPU.setText(listaCPU.cabeza.getPokemon().getNombreP());
                        lblVidaRestanteCPU.setText(String.valueOf(listaCPU.cabeza.getPokemon().getHitPoints() + " HP"));

                    } else if (listaCPU.cabeza.next == null) {//la batalla se ha ganado
                        listaCPU.eliminarMuerto();
                        //esperarSegundos(1000,"Has vencido a CPU. Ganaste la batalla.");
                        lblTexto.setText("Has vencido a CPU. Ganaste la batalla.");// Eliminamos de la lista a cabeza
                        panelAtaques.setVisible(false);
                        lblVidaRestanteCPU.setVisible(false);
                        lblPokeActualCPU.setVisible(false);
                    }
                }
                habilidadesCPU();
            } else {
                String vidaLabel;
                System.out.println("cabeza: ");
                System.out.println(listaCPU.cabeza.getPokemon().getNombreP());

                String nombrePokemonCPU = listaCPU.cabeza.getPokemon().getNombreP();
                int vidaP1CPU = listaCPU.cabeza.getPokemon().getHitPoints();
                String vidaP1StrCPU = String.valueOf(vidaP1CPU);
                int HP = listaCPU.cabeza.getPokemon().getHitPoints() - listaJugador.cabeza.next.next.getPokemon().getAtaqueEspecial();
                vidaLabel = String.valueOf(HP);
                lblVidaRestanteCPU.setText(vidaLabel + " HP");
                //panelAtaques.setVisible(false);
                panelSeleccionPokemon.setVisible(false);
                lblTexto.setText(nombrePokemonCPU + " ha recibido: " + listaJugador.cabeza.next.next.getPokemon().getAtaqueEspecial() + " del ataque especial");
                listaCPU.cabeza.getPokemon().setHitPoints(HP);
                //si el ataque mata al Pokemon, borrelo de la lista y traiga al nuevo
                if (listaCPU.cabeza.getPokemon().getHitPoints() <= 0) {
                    //ocultamos los labels
                    ocultarLabelsCPU();
                    //esperarSegundos(2000,nombrePokemonCPU + " ha sido eliminado");
                    lblTexto.setText(nombrePokemonCPU + " ha sido eliminado"); //setear en 2 segundos para que sea visible.
                    lblPokeActualCPU.setText("0");
                    if (listaCPU.cabeza.next != null) {
                        listaCPU.eliminarMuerto();
                        listaCPU.cabeza.getPokemon().setIndice(0);//seteamos el indice en cabeza
                        mostrarLabelCabezaCPU(); //cambiamos el label y lo mostramos
                        System.out.println("\nlista cabeza \n");
                        listaCPU.mostrar();// para llevar un orden en consola
                        // esperarSegundos(1000,nombrePokemonCPU + "CPU peleara con: " + listaCPU.cabeza.getPokemon().getNombreP());
                        lblTexto.setText("CPU peleara con: " + listaCPU.cabeza.getPokemon().getNombreP());
                        lblPokeActualCPU.setText(listaCPU.cabeza.getPokemon().getNombreP());
                        lblVidaRestanteCPU.setText(String.valueOf(listaCPU.cabeza.getPokemon().getHitPoints() + " HP"));

                    } else if (listaCPU.cabeza.next == null) {//la batalla se ha ganado
                        listaCPU.eliminarMuerto();
                        //esperarSegundos(1000,"Has vencido a CPU. Ganaste la batalla.");
                        lblTexto.setText("Has vencido a CPU. Ganaste la batalla.");// Eliminamos de la lista a cabeza
                        panelAtaques.setVisible(false);
                        lblVidaRestanteCPU.setVisible(false);
                        lblPokeActualCPU.setVisible(false);
                    }
                }
                habilidadesCPU();
            }
        } else if (numeroBoton == 4) {
            if (listaJugador.cabeza.next.next.next.getPokemon().getTipo() == AGUA && listaCPU.cabeza.getPokemon().getTipo() == FUEGO) {
                String vidaLabel;
                System.out.println("cabeza: ");
                System.out.println(listaCPU.cabeza.getPokemon().getNombreP());
                String nombrePokemonCPU = listaCPU.cabeza.getPokemon().getNombreP();
                int vidaP1CPU = listaCPU.cabeza.getPokemon().getHitPoints();
                String vidaP1StrCPU = String.valueOf(vidaP1CPU);
                int HP = listaCPU.cabeza.getPokemon().getHitPoints() - listaJugador.cabeza.next.next.next.getPokemon().getAtaqueEspecial() + 10;
                vidaLabel = String.valueOf(HP);
                lblVidaRestanteCPU.setText(vidaLabel + " HP");
                //panelAtaques.setVisible(false);
                panelSeleccionPokemon.setVisible(false);
                lblTexto.setText(nombrePokemonCPU + " ha recibido: " + listaJugador.cabeza.next.next.next.getPokemon().getAtaqueEspecial() + " del ataque especial");
                listaCPU.cabeza.getPokemon().setHitPoints(HP);
                //si el ataque mata al Pokemon, borrelo de la lista y traiga al nuevo
                if (listaCPU.cabeza.getPokemon().getHitPoints() <= 0) {
                    //ocultamos los labels
                    ocultarLabelsCPU();
                    //esperarSegundos(2000,nombrePokemonCPU + " ha sido eliminado");
                    lblTexto.setText(nombrePokemonCPU + " ha sido eliminado"); //setear en 2 segundos para que sea visible.
                    lblPokeActualCPU.setText("0");
                    if (listaCPU.cabeza.next != null) {
                        listaCPU.eliminarMuerto();
                        listaCPU.cabeza.getPokemon().setIndice(0);//seteamos el indice en cabeza
                        mostrarLabelCabezaCPU(); //cambiamos el label y lo mostramos
                        System.out.println("\nlista cabeza \n");
                        listaCPU.mostrar();// para llevar un orden en consola
                        // esperarSegundos(1000,nombrePokemonCPU + "CPU peleara con: " + listaCPU.cabeza.getPokemon().getNombreP());
                        lblTexto.setText("CPU peleara con: " + listaCPU.cabeza.getPokemon().getNombreP());
                        lblPokeActualCPU.setText(listaCPU.cabeza.getPokemon().getNombreP());
                        lblVidaRestanteCPU.setText(String.valueOf(listaCPU.cabeza.getPokemon().getHitPoints() + " HP"));

                    } else if (listaCPU.cabeza.next == null) {//la batalla se ha ganado
                        listaCPU.eliminarMuerto();
                        //esperarSegundos(1000,"Has vencido a CPU. Ganaste la batalla.");
                        lblTexto.setText("Has vencido a CPU. Ganaste la batalla.");// Eliminamos de la lista a cabeza
                        panelAtaques.setVisible(false);
                        lblVidaRestanteCPU.setVisible(false);
                        lblPokeActualCPU.setVisible(false);
                    }
                }
                habilidadesCPU();
            } else if (listaJugador.cabeza.next.next.next.getPokemon().getTipo() == FUEGO && listaCPU.cabeza.getPokemon().getTipo() == NORMAL || listaJugador.cabeza.next.next.next.getPokemon().getTipo() == NORMAL && listaCPU.cabeza.getPokemon().getTipo() == AGUA) {
                String vidaLabel;
                System.out.println("cabeza: ");
                System.out.println(listaCPU.cabeza.getPokemon().getNombreP());

                String nombrePokemonCPU = listaCPU.cabeza.getPokemon().getNombreP();
                int vidaP1CPU = listaCPU.cabeza.getPokemon().getHitPoints();
                String vidaP1StrCPU = String.valueOf(vidaP1CPU);
                int HP = listaCPU.cabeza.getPokemon().getHitPoints() - listaJugador.cabeza.next.next.next.getPokemon().getAtaqueEspecial() + 5;
                vidaLabel = String.valueOf(HP);
                lblVidaRestanteCPU.setText(vidaLabel + " HP");
                //panelAtaques.setVisible(false);
                panelSeleccionPokemon.setVisible(false);
                lblTexto.setText(nombrePokemonCPU + " ha recibido: " + listaJugador.cabeza.next.next.next.getPokemon().getAtaqueEspecial() + " del ataque especial");
                listaCPU.cabeza.getPokemon().setHitPoints(HP);
                //si el ataque mata al Pokemon, borrelo de la lista y traiga al nuevo
                if (listaCPU.cabeza.getPokemon().getHitPoints() <= 0) {
                    //ocultamos los labels
                    ocultarLabelsCPU();
                    //esperarSegundos(2000,nombrePokemonCPU + " ha sido eliminado");
                    lblTexto.setText(nombrePokemonCPU + " ha sido eliminado"); //setear en 2 segundos para que sea visible.
                    lblPokeActualCPU.setText("0");
                    if (listaCPU.cabeza.next != null) {
                        listaCPU.eliminarMuerto();
                        listaCPU.cabeza.getPokemon().setIndice(0);//seteamos el indice en cabeza
                        mostrarLabelCabezaCPU(); //cambiamos el label y lo mostramos
                        System.out.println("\nlista cabeza \n");
                        listaCPU.mostrar();// para llevar un orden en consola
                        // esperarSegundos(1000,nombrePokemonCPU + "CPU peleara con: " + listaCPU.cabeza.getPokemon().getNombreP());
                        lblTexto.setText("CPU peleara con: " + listaCPU.cabeza.getPokemon().getNombreP());
                        lblPokeActualCPU.setText(listaCPU.cabeza.getPokemon().getNombreP());
                        lblVidaRestanteCPU.setText(String.valueOf(listaCPU.cabeza.getPokemon().getHitPoints() + " HP"));

                    } else if (listaCPU.cabeza.next == null) {//la batalla se ha ganado
                        listaCPU.eliminarMuerto();
                        //esperarSegundos(1000,"Has vencido a CPU. Ganaste la batalla.");
                        lblTexto.setText("Has vencido a CPU. Ganaste la batalla.");// Eliminamos de la lista a cabeza
                        panelAtaques.setVisible(false);
                        lblVidaRestanteCPU.setVisible(false);
                        lblPokeActualCPU.setVisible(false);
                    }
                }
                habilidadesCPU();
            } else {
                String vidaLabel;
                System.out.println("cabeza: ");
                System.out.println(listaCPU.cabeza.getPokemon().getNombreP());

                String nombrePokemonCPU = listaCPU.cabeza.getPokemon().getNombreP();
                int vidaP1CPU = listaCPU.cabeza.getPokemon().getHitPoints();
                String vidaP1StrCPU = String.valueOf(vidaP1CPU);
                int HP = listaCPU.cabeza.getPokemon().getHitPoints() - listaJugador.cabeza.next.next.next.getPokemon().getAtaqueEspecial();
                vidaLabel = String.valueOf(HP);
                lblVidaRestanteCPU.setText(vidaLabel + " HP");
                //panelAtaques.setVisible(false);
                panelSeleccionPokemon.setVisible(false);
                lblTexto.setText(nombrePokemonCPU + " ha recibido: " + listaJugador.cabeza.next.next.next.getPokemon().getAtaqueEspecial() + " del ataque especial");
                listaCPU.cabeza.getPokemon().setHitPoints(HP);
                //si el ataque mata al Pokemon, borrelo de la lista y traiga al nuevo
                if (listaCPU.cabeza.getPokemon().getHitPoints() <= 0) {
                    //ocultamos los labels
                    ocultarLabelsCPU();
                    //esperarSegundos(2000,nombrePokemonCPU + " ha sido eliminado");
                    lblTexto.setText(nombrePokemonCPU + " ha sido eliminado"); //setear en 2 segundos para que sea visible.
                    lblPokeActualCPU.setText("0");
                    if (listaCPU.cabeza.next != null) {
                        listaCPU.eliminarMuerto();
                        listaCPU.cabeza.getPokemon().setIndice(0);//seteamos el indice en cabeza
                        mostrarLabelCabezaCPU(); //cambiamos el label y lo mostramos
                        System.out.println("\nlista cabeza \n");
                        listaCPU.mostrar();// para llevar un orden en consola
                        // esperarSegundos(1000,nombrePokemonCPU + "CPU peleara con: " + listaCPU.cabeza.getPokemon().getNombreP());
                        lblTexto.setText("CPU peleara con: " + listaCPU.cabeza.getPokemon().getNombreP());
                        lblPokeActualCPU.setText(listaCPU.cabeza.getPokemon().getNombreP());
                        lblVidaRestanteCPU.setText(String.valueOf(listaCPU.cabeza.getPokemon().getHitPoints() + " HP"));

                    } else if (listaCPU.cabeza.next == null) {//la batalla se ha ganado
                        listaCPU.eliminarMuerto();
                        //esperarSegundos(1000,"Has vencido a CPU. Ganaste la batalla.");
                        lblTexto.setText("Has vencido a CPU. Ganaste la batalla.");// Eliminamos de la lista a cabeza
                        panelAtaques.setVisible(false);
                        lblVidaRestanteCPU.setVisible(false);
                        lblPokeActualCPU.setVisible(false);
                    }
                }
                habilidadesCPU();
            }

        }
    }//GEN-LAST:event_btnAtaqueEspecialActionPerformed

    public void esperarSegundos(int milisegundos, String texto) {
        Timer timer = new Timer(2000, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                // Actualizar lblTexto después del retraso
                lblTexto.setText(texto);
            }
        });
        timer.setRepeats(false); // Configurar para que el temporizador solo se ejecute una vez
        timer.start(); // Iniciar el temporizador

    }

    private void mostrarPokedexActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mostrarPokedexActionPerformed
        listaJugador.mostrar();
    }//GEN-LAST:event_mostrarPokedexActionPerformed

    private void BotonDoduoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonDoduoActionPerformed
        listaJugador.insertarListaJugador(new Pokemon(Pokemon.NORMAL, "Doduo", 150, 50, 35, 70, 60));
        this.BotonDoduo.setVisible(false);
        this.lblDoduo.setVisible(false);
        contadorPokemonJugador++;
        if (contadorPokemonJugador == 1) {
            lblTexto.setText("Doduo agregado a la batalla.  Tienes un Pokemon en la pokedex. (Escoge 3 Pokemones mas )");
        } else if (contadorPokemonJugador == 2) {
            lblTexto.setText("Doduo agregado a la batalla.  Tienes dos Pokemon en la pokedex. (Escoge 2 Pokemones mas )");
        } else if (contadorPokemonJugador == 3) {
            lblTexto.setText("Doduo agregado a la batalla.  Tienes tres Pokemon en la pokedex. (Escoge 1 Pokemon mas )");
        } else if (contadorPokemonJugador == 4) {
            lblTexto.setText("Doduo agregado a la batalla, Pokedex Completa");
            this.botonInicioBatalla.setVisible(true);
            ocultarPokedex();
        }
    }//GEN-LAST:event_BotonDoduoActionPerformed

    private void BotonBlastoiseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonBlastoiseActionPerformed
        listaJugador.insertarListaJugador(new Pokemon(Pokemon.AGUA, "Blastoise", 190, 55, 45, 75, 65));
        this.BotonBlastoise.setVisible(false);
        this.lblBlastoise.setVisible(false);
        contadorPokemonJugador++;
        if (contadorPokemonJugador == 1) {
            lblTexto.setText("Blastoise agregado a la batalla.  Tienes un Pokemon en la pokedex. (Escoge 3 Pokemones mas )");
        } else if (contadorPokemonJugador == 2) {
            lblTexto.setText("Blastoise agregado a la batalla.  Tienes dos Pokemon en la pokedex. (Escoge 2 Pokemones mas )");
        } else if (contadorPokemonJugador == 3) {
            lblTexto.setText("Blastoise agregado a la batalla.  Tienes tres Pokemon en la pokedex. (Escoge 1 Pokemon mas )");
        } else if (contadorPokemonJugador == 4) {
            lblTexto.setText("Blastoise agregado a la batalla, Pokedex Completa");
            this.botonInicioBatalla.setVisible(true);
            ocultarPokedex();
        }
    }//GEN-LAST:event_BotonBlastoiseActionPerformed

    private void BotonLaprasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonLaprasActionPerformed
        listaJugador.insertarListaJugador(new Pokemon(Pokemon.AGUA, "Lapras", 190, 55, 45, 75, 65));
        this.BotonLapras.setVisible(false);
        this.lblLapras.setVisible(false);
        contadorPokemonJugador++;
        if (contadorPokemonJugador == 1) {
            lblTexto.setText("Lapras agregado a la batalla.  Tienes un Pokemon en la pokedex. (Escoge 3 Pokemones mas )");
        } else if (contadorPokemonJugador == 2) {
            lblTexto.setText("Lapras agregado a la batalla.  Tienes dos Pokemon en la pokedex. (Escoge 2 Pokemones mas )");
        } else if (contadorPokemonJugador == 3) {
            lblTexto.setText("Lapras agregado a la batalla.  Tienes tres Pokemon en la pokedex. (Escoge 1 Pokemon mas )");
        } else if (contadorPokemonJugador == 4) {
            lblTexto.setText("Lapras agregado a la batalla, Pokedex Completa");
            this.botonInicioBatalla.setVisible(true);
            ocultarPokedex();
        }
    }//GEN-LAST:event_BotonLaprasActionPerformed

    private void BotonMagmortarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonMagmortarActionPerformed
        listaJugador.insertarListaJugador(new Pokemon(Pokemon.FUEGO, "Magmortar", 115, 70, 45, 80, 60));
        this.BotonMagmortar.setVisible(false);
        this.lblMagmortar.setVisible(false);
        contadorPokemonJugador++;
        if (contadorPokemonJugador == 1) {
            lblTexto.setText("Magmortar agregado a la batalla.  Tienes un Pokemon en la pokedex. (Escoge 3 Pokemones mas )");
        } else if (contadorPokemonJugador == 2) {
            lblTexto.setText("Magmortar agregado a la batalla.  Tienes dos Pokemon en la pokedex. (Escoge 2 Pokemones mas )");
        } else if (contadorPokemonJugador == 3) {
            lblTexto.setText("Magmortar agregado a la batalla.  Tienes tres Pokemon en la pokedex. (Escoge 1 Pokemon mas )");
        } else if (contadorPokemonJugador == 4) {
            lblTexto.setText("Magmortar agregado a la batalla, Pokedex Completa");
            this.botonInicioBatalla.setVisible(true);
            ocultarPokedex();
        }
    }//GEN-LAST:event_BotonMagmortarActionPerformed

    private void BotonCharizardActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonCharizardActionPerformed
        listaJugador.insertarListaJugador(new Pokemon(Pokemon.FUEGO, "Charizard", 115, 70, 45, 80, 60));
        this.BotonCharizard.setVisible(false);
        this.lblCharizard.setVisible(false);
        contadorPokemonJugador++;
        if (contadorPokemonJugador == 1) {
            lblTexto.setText("Charizard agregado a la batalla.  Tienes un Pokemon en la pokedex. (Escoge 3 Pokemones mas )");
        } else if (contadorPokemonJugador == 2) {
            lblTexto.setText("Charizard agregado a la batalla.  Tienes dos Pokemon en la pokedex. (Escoge 2 Pokemones mas )");
        } else if (contadorPokemonJugador == 3) {
            lblTexto.setText("Charizard agregado a la batalla.  Tienes tres Pokemon en la pokedex. (Escoge 1 Pokemon mas )");
        } else if (contadorPokemonJugador == 4) {
            lblTexto.setText("Charizard agregado a la batalla, Pokedex Completa");
            this.botonInicioBatalla.setVisible(true);
            ocultarPokedex();
        }
    }//GEN-LAST:event_BotonCharizardActionPerformed

    private void BotonBlazikenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonBlazikenActionPerformed
        listaJugador.insertarListaJugador(new Pokemon(Pokemon.FUEGO, "Blaziken", 115, 70, 45, 80, 60));
        this.BotonBlaziken.setVisible(false);
        this.lblBlaziken.setVisible(false);
        contadorPokemonJugador++;
        if (contadorPokemonJugador == 1) {
            lblTexto.setText("Blaziken agregado a la batalla.  Tienes un Pokemon en la pokedex. (Escoge 3 Pokemones mas )");
        } else if (contadorPokemonJugador == 2) {
            lblTexto.setText("Blaziken agregado a la batalla.  Tienes dos Pokemon en la pokedex. (Escoge 2 Pokemones mas )");
        } else if (contadorPokemonJugador == 3) {
            lblTexto.setText("Blaziken agregado a la batalla.  Tienes tres Pokemon en la pokedex. (Escoge 1 Pokemon mas )");
        } else if (contadorPokemonJugador == 4) {
            lblTexto.setText("Blaziken agregado a la batalla, Pokedex Completa");
            this.botonInicioBatalla.setVisible(true);
            ocultarPokedex();
        }
    }//GEN-LAST:event_BotonBlazikenActionPerformed

    //Metodos de ocultar
    private void ocultarPokedex() {
        this.panelPokedex.setVisible(false);
    }

    private void ocultarLabelsJugador() {
        this.lblSnorlaxPeleando.setVisible(false);
        this.lblArceusPeleando.setVisible(false);
        this.lblDoduoPeleando.setVisible(false);
        this.lblGyaradosPeleando.setVisible(false);
        this.lblBlastoisePeleando.setVisible(false);
        this.lblLaprasPeleando.setVisible(false);
        this.lblMagmortarPeleando.setVisible(false);
        this.lblCharizardPeleando.setVisible(false);
        this.lblBlazikenPeleando.setVisible(false);
    }

    private void ocultarLabelsCPU() {
        this.lblSnorlaxCPU.setVisible(false);
        this.lblArceusCPU.setVisible(false);
        this.lblDoduoCPU.setVisible(false);
        this.lblGyaradosCPU.setVisible(false);
        this.lblBlastoiseCPU.setVisible(false);
        this.lblLaprasCPU.setVisible(false);
        this.lblMagmortarCPU.setVisible(false);
        this.lblCharizardCPU.setVisible(false);
        this.lblBlazikenCPU.setVisible(false);
    }


    private void botonTextoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonTextoActionPerformed
        this.panelPokedex.setVisible(true);
        this.botonTexto.setVisible(false);
        lblTexto.setText("Escoge el primer Pokemon");
        
    }//GEN-LAST:event_botonTextoActionPerformed

    private void mostrarLabelCabezaCPU() {
        String nombrePokemonCPU = listaCPU.cabeza.getPokemon().getNombreP();
        if (nombrePokemonCPU == "Snorlax") {
            ocultarLabelsCPU();
            this.lblSnorlaxCPU.setVisible(true);
        } else if (nombrePokemonCPU == "Magmortar") {
            ocultarLabelsCPU();
            this.lblMagmortarCPU.setVisible(true);
        } else if (nombrePokemonCPU == "Arceus") {
            ocultarLabelsCPU();
            this.lblArceusCPU.setVisible(true);
        } else if (nombrePokemonCPU == "Doduo") {
            ocultarLabelsCPU();
            this.lblDoduoCPU.setVisible(true);
        } else if (nombrePokemonCPU == "Blastoise") {
            ocultarLabelsCPU();
            this.lblBlastoiseCPU.setVisible(true);
        } else if (nombrePokemonCPU == "Gyarados") {
            ocultarLabelsCPU();
            this.lblGyaradosCPU.setVisible(true);
        } else if (nombrePokemonCPU == "Lapras") {
            ocultarLabelsCPU();
            this.lblLaprasCPU.setVisible(true);
        } else if (nombrePokemonCPU == "Charizard") {
            ocultarLabelsCPU();
            this.lblCharizardCPU.setVisible(true);
        } else if (nombrePokemonCPU == "Blaziken") {
            ocultarLabelsCPU();
            this.lblBlazikenCPU.setVisible(true);
        }

    }

    private void botonInicioBatallaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonInicioBatallaActionPerformed

        this.panelSeleccionPokemon.setVisible(true);
        //ocultarPokemonJugadorVencido();
        //Genera un numero random
        //Insertarmos en este boton para que genere a la hora de iniciar la batalla los pokemones del CPU
        listaCPU.insertarListaCPU(new PokemonCPU(0, Pokemon.FUEGO, "Blaziken", 115, 70, 45, 80, 60));
        listaCPU.insertarListaCPU(new PokemonCPU(1, Pokemon.FUEGO, "Charizard", 115, 70, 45, 80, 60));
        listaCPU.insertarListaCPU(new PokemonCPU(2, Pokemon.FUEGO, "Magmortar", 115, 70, 45, 80, 60));
        listaCPU.insertarListaCPU(new PokemonCPU(3, Pokemon.AGUA, "Lapras", 190, 55, 45, 75, 65));
        listaCPU.insertarListaCPU(new PokemonCPU(4, Pokemon.AGUA, "Blastoise", 190, 55, 45, 75, 65));
        listaCPU.insertarListaCPU(new PokemonCPU(5, Pokemon.AGUA, "Gyarados", 190, 55, 45, 75, 65));
        listaCPU.insertarListaCPU(new PokemonCPU(6, Pokemon.NORMAL, "Doduo", 150, 50, 35, 70, 60));
        listaCPU.insertarListaCPU(new PokemonCPU(7, Pokemon.NORMAL, "Arceus", 150, 50, 35, 70, 60));
        listaCPU.insertarListaCPU(new PokemonCPU(8, Pokemon.NORMAL, "Snorlax", 150, 50, 35, 70, 60));
        System.out.println("\nLista Jugador:\n");
        listaJugador.mostrar();

        lblTexto.setText("Escoge un Pokemon para pelear");
        this.botonInicioBatalla.setVisible(false);
        //se eliminan 5 random porque tienen que haber 4
        listaCPU.eliminarRandom();
        listaCPU.eliminarRandom();
        listaCPU.eliminarRandom();
        listaCPU.eliminarRandom();
        listaCPU.eliminarRandom();
        listaCPU.eliminarRandom();
        System.out.println("\nLista CPU Random: \n");
        listaCPU.mostrar();

        //Atributos para el jugador
        String nombrePokemon1 = listaJugador.cabeza.getPokemon().getNombreP();
        int vidaP1 = listaJugador.cabeza.getPokemon().getHitPoints();
        String vidaP1Str = String.valueOf(vidaP1);
        String nombrePokemon2 = listaJugador.cabeza.next.getPokemon().getNombreP();
        int vidaP2 = listaJugador.cabeza.next.getPokemon().getHitPoints();
        String vidaP2Str = String.valueOf(vidaP2);
        String nombrePokemon3 = listaJugador.cabeza.next.next.getPokemon().getNombreP();
        int vidaP3 = listaJugador.cabeza.next.next.getPokemon().getHitPoints();
        String vidaP3Str = String.valueOf(vidaP3);
        String nombrePokemon4 = listaJugador.cabeza.next.next.next.getPokemon().getNombreP();
        int vidaP4 = listaJugador.cabeza.next.next.next.getPokemon().getHitPoints();
        String vidaP4Str = String.valueOf(vidaP4);

        //etiquetas de seleccion Jugador
        lblPokemon1.setText(nombrePokemon1);
        lblVidaP1.setText("Vida: " + vidaP1Str);
        lblPokemon2.setText(nombrePokemon2);
        lblVidaP2.setText("Vida: " + vidaP2Str);
        lblPokemon3.setText(nombrePokemon3);
        lblVidaP3.setText("Vida: " + vidaP3Str);
        lblPokemon4.setText(nombrePokemon4);
        lblVidaP4.setText("Vida: " + vidaP4Str);

        //Atributos del CPU
        String nombrePokemonCPU = listaCPU.cabeza.getPokemon().getNombreP();
        int vidaP1CPU = listaCPU.cabeza.getPokemon().getHitPoints();
        String vidaP1StrCPU = String.valueOf(vidaP1CPU);

        //etiqueta de seleccion CPU
        lblPokeActualCPU.setText(nombrePokemonCPU);
        lblVidaRestanteCPU.setText(vidaP1StrCPU + " HP");

        //Muestra los labels del Pokemon cabeza del CPU, el cual esta en batalla en consola para orden
        mostrarLabelCabezaCPU();


    }//GEN-LAST:event_botonInicioBatallaActionPerformed

    private void btnCambiarPokemonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCambiarPokemonActionPerformed
        this.panelSeleccionPokemon.setVisible(true);
        //ocultarPokemonJugadorVencido();
    }//GEN-LAST:event_btnCambiarPokemonActionPerformed

    private void botonSalirSeleccionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonSalirSeleccionActionPerformed
        // TODO add your handling code here:
        if (numeroBoton == 1 || numeroBoton == 2 || numeroBoton == 3 || numeroBoton == 4) {
            this.panelSeleccionPokemon.setVisible(false);
            this.panelAtaques.setVisible(true);
            lblTexto.setText("Escoge un pokemon primero");
        } else {
            lblTexto.setText("Escoge un pokemon primero");

        }
    }//GEN-LAST:event_botonSalirSeleccionActionPerformed

    private void btnPokemonJ1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPokemonJ1ActionPerformed
        numeroBoton = 1;
        //atributos de pokemon1
        String nombrePokemonActualCPU = listaCPU.cabeza.getPokemon().getNombreP();
        String nombrePokemon1 = listaJugador.cabeza.getPokemon().getNombreP();
        int vidaP1 = listaJugador.cabeza.getPokemon().getHitPoints();
        String vidaP1Str = String.valueOf(vidaP1);

        this.panelAtaques.setVisible(true);
        this.panelSeleccionPokemon.setVisible(false);

        lblTexto.setText(nombrePokemon1 + " listo para pelear. ¿Que desea hacer?");
        lblVidaRestante.setText(vidaP1Str + " HP");
        lblPokeActualJugador.setText(nombrePokemon1);

       if (nombrePokemon1.equals("Snorlax")) {
        this.lblSnorlaxPeleando.setVisible(true);
    } else if (nombrePokemon1.equals("Magmortar")) {
        this.lblMagmortarPeleando.setVisible(true);
    } else if (nombrePokemon1.equals("Arceus")) {
        this.lblArceusPeleando.setVisible(true);
    } else if (nombrePokemon1.equals("Doduo")) {
        this.lblDoduoPeleando.setVisible(true);
    } else if (nombrePokemon1.equals("Blastoise")) {
        this.lblBlastoisePeleando.setVisible(true);
    } else if (nombrePokemon1.equals("Gyarados")) {
        this.lblGyaradosPeleando.setVisible(true);
    } else if (nombrePokemon1.equals("Lapras")) {
        this.lblLaprasPeleando.setVisible(true);
    } else if (nombrePokemon1.equals("Charizard")) {
        this.lblCharizardPeleando.setVisible(true);
    } else if (nombrePokemon1.equals("Blaziken")) {
        this.lblBlazikenPeleando.setVisible(true);
    }

    }//GEN-LAST:event_btnPokemonJ1ActionPerformed

    private void btnPokemonJ2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPokemonJ2ActionPerformed
        numeroBoton = 2;
        //atributos de pokemon2
        String nombrePokemon2 = listaJugador.cabeza.next.getPokemon().getNombreP();
        int vidaP2 = listaJugador.cabeza.next.getPokemon().getHitPoints();
        String vidaP2Str = String.valueOf(vidaP2);

        this.panelAtaques.setVisible(true);
        this.panelSeleccionPokemon.setVisible(false);

        lblTexto.setText(nombrePokemon2 + " listo para pelear. ¿Que desea hacer?");
        lblVidaRestante.setText(vidaP2Str + " HP");
        lblPokeActualJugador.setText(nombrePokemon2);

        if (nombrePokemon2 == "Snorlax") {
            ocultarLabelsJugador();
            this.lblSnorlaxPeleando.setVisible(true);
        } else if (nombrePokemon2 == "Magmortar") {
            ocultarLabelsJugador();
            this.lblMagmortarPeleando.setVisible(true);
        } else if (nombrePokemon2 == "Arceus") {
            ocultarLabelsJugador();
            this.lblArceusPeleando.setVisible(true);
        } else if (nombrePokemon2 == "Doduo") {
            ocultarLabelsJugador();
            this.lblDoduoPeleando.setVisible(true);
        } else if (nombrePokemon2 == "Blastoise") {
            ocultarLabelsJugador();
            this.lblBlastoisePeleando.setVisible(true);
        } else if (nombrePokemon2 == "Gyarados") {
            ocultarLabelsJugador();
            this.lblGyaradosPeleando.setVisible(true);
        } else if (nombrePokemon2 == "Lapras") {
            ocultarLabelsJugador();
            this.lblLaprasPeleando.setVisible(true);
        } else if (nombrePokemon2 == "Charizard") {
            ocultarLabelsJugador();
            this.lblCharizardPeleando.setVisible(true);
        } else if (nombrePokemon2 == "Blaziken") {
            ocultarLabelsJugador();
            this.lblBlazikenPeleando.setVisible(true);
        }
    }//GEN-LAST:event_btnPokemonJ2ActionPerformed

    private void btnPokemonJ3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPokemonJ3ActionPerformed
        numeroBoton = 3;
        //atributos de pokemon3
        String nombrePokemon3 = listaJugador.cabeza.next.next.getPokemon().getNombreP();
        int vidaP3 = listaJugador.cabeza.next.next.getPokemon().getHitPoints();
        String vidaP3Str = String.valueOf(vidaP3);
        this.panelAtaques.setVisible(true);
        this.panelSeleccionPokemon.setVisible(false);

        lblTexto.setText(nombrePokemon3 + " listo para pelear. ¿Que desea hacer?");
        lblVidaRestante.setText(vidaP3Str + " HP");
        lblPokeActualJugador.setText(nombrePokemon3);

        if (nombrePokemon3 == "Snorlax") {
            ocultarLabelsJugador();
            this.lblSnorlaxPeleando.setVisible(true);
        } else if (nombrePokemon3 == "Magmortar") {
            ocultarLabelsJugador();
            this.lblMagmortarPeleando.setVisible(true);
        } else if (nombrePokemon3 == "Arceus") {
            ocultarLabelsJugador();
            this.lblArceusPeleando.setVisible(true);
        } else if (nombrePokemon3 == "Doduo") {
            ocultarLabelsJugador();
            this.lblDoduoPeleando.setVisible(true);
        } else if (nombrePokemon3 == "Blastoise") {
            ocultarLabelsJugador();
            this.lblBlastoisePeleando.setVisible(true);
        } else if (nombrePokemon3 == "Gyarados") {
            ocultarLabelsJugador();
            this.lblGyaradosPeleando.setVisible(true);
        } else if (nombrePokemon3 == "Lapras") {
            ocultarLabelsJugador();
            this.lblLaprasPeleando.setVisible(true);
        } else if (nombrePokemon3 == "Charizard") {
            ocultarLabelsJugador();
            this.lblCharizardPeleando.setVisible(true);
        } else if (nombrePokemon3 == "Blaziken") {
            ocultarLabelsJugador();
            this.lblBlazikenPeleando.setVisible(true);
        }

    }//GEN-LAST:event_btnPokemonJ3ActionPerformed

    private void btnPokemonJ4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPokemonJ4ActionPerformed
        numeroBoton = 4;
        //atributos de pokemon4
        String nombrePokemon4 = listaJugador.cabeza.next.next.next.getPokemon().getNombreP();
        int vidaP4 = listaJugador.cabeza.next.next.next.getPokemon().getHitPoints();
        String vidaP4Str = String.valueOf(vidaP4);
        this.panelSeleccionPokemon.setVisible(false);
        this.panelAtaques.setVisible(true);

        lblTexto.setText(nombrePokemon4 + " listo para pelear. ¿Que desea hacer?");
        lblVidaRestante.setText(vidaP4Str + " HP");
        lblPokeActualJugador.setText(nombrePokemon4);

        if (nombrePokemon4 == "Snorlax") {
            ocultarLabelsJugador();
            this.lblSnorlaxPeleando.setVisible(true);
        } else if (nombrePokemon4 == "Magmortar") {
            ocultarLabelsJugador();
            this.lblMagmortarPeleando.setVisible(true);
        } else if (nombrePokemon4 == "Arceus") {
            ocultarLabelsJugador();
            this.lblArceusPeleando.setVisible(true);
        } else if (nombrePokemon4 == "Doduo") {
            ocultarLabelsJugador();
            this.lblDoduoPeleando.setVisible(true);
        } else if (nombrePokemon4 == "Blastoise") {
            ocultarLabelsJugador();
            this.lblBlastoisePeleando.setVisible(true);
        } else if (nombrePokemon4 == "Gyarados") {
            ocultarLabelsJugador();
            this.lblGyaradosPeleando.setVisible(true);
        } else if (nombrePokemon4 == "Lapras") {
            ocultarLabelsJugador();
            this.lblLaprasPeleando.setVisible(true);
        } else if (nombrePokemon4 == "Charizard") {
            ocultarLabelsJugador();
            this.lblCharizardPeleando.setVisible(true);
        } else if (nombrePokemon4 == "Blaziken") {
            ocultarLabelsJugador();
            this.lblBlazikenPeleando.setVisible(true);
        }

    }//GEN-LAST:event_btnPokemonJ4ActionPerformed

    private void btnAtaqueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAtaqueActionPerformed
        //validacion cada dos turnos de ataque esp
        if (ataqueEspCooldown == 2 || ataqueEspCooldown == 1) {
            btnAtaqueEspecial.setVisible(false);
            ataqueEspCooldown--;
        } else if (ataqueEspCooldown == 0) {
            btnAtaqueEspecial.setVisible(true);
        }

        if (defensaEspCooldown == 2) {
            btnDefensaEspecial.setVisible(false);
        }
        //validacion cada dos turnos de def esp
        if (defensaEspCooldown == 2 || defensaEspCooldown == 1) {
            btnDefensaEspecial.setVisible(false);
            defensaEspCooldown--;
        } else if (defensaEspCooldown == 0) {
            btnDefensaEspecial.setVisible(true);
        }

        if (ataqueEspCooldown == 2) {
            btnAtaqueEspecial.setVisible(false);
        }
        String vidaLabel;
        System.out.println("cabeza: ");
        System.out.println(listaCPU.cabeza.getPokemon().getNombreP());

        String nombrePokemonCPU = listaCPU.cabeza.getPokemon().getNombreP();
        int vidaP1CPU = listaCPU.cabeza.getPokemon().getHitPoints();
        String vidaP1StrCPU = String.valueOf(vidaP1CPU);
        int HP = listaCPU.cabeza.getPokemon().getHitPoints() - listaJugador.cabeza.getPokemon().getAtaque();
        vidaLabel = String.valueOf(HP);
        lblVidaRestanteCPU.setText(vidaLabel + " HP");

        //panelAtaques.setVisible(false);
        panelSeleccionPokemon.setVisible(false);
        lblTexto.setText(nombrePokemonCPU + " ha recibido: " + listaJugador.cabeza.getPokemon().getAtaque() + " de daño");

        listaCPU.cabeza.getPokemon().setHitPoints(HP);

        //si el ataque mata al Pokemon, borrelo de la lista y traiga al nuevo
        if (listaCPU.cabeza.getPokemon().getHitPoints() <= 0) {
            //ocultamos los labels
            ocultarLabelsCPU();
            lblTexto.setText(nombrePokemonCPU + " ha sido eliminado");//cambiado
            //lblTexto.setText(nombrePokemonCPU + " ha sido eliminado");

            if (listaCPU.cabeza.next != null) {
                listaCPU.eliminarMuerto();
                listaCPU.cabeza.getPokemon().setIndice(0);
                mostrarLabelCabezaCPU(); //cambiamos el label y lo mostramos
                System.out.println("\nlista cabeza \n");
                listaCPU.mostrar();
                esperarSegundos(1000, "CPU peleara con: " + listaCPU.cabeza.getPokemon().getNombreP());
                lblPokeActualCPU.setText(listaCPU.cabeza.getPokemon().getNombreP());
                lblVidaRestanteCPU.setText(String.valueOf(listaCPU.cabeza.getPokemon().getHitPoints() + " HP"));

            } else if (listaCPU.cabeza.next == null) {//la batalla se ha ganado
                listaCPU.eliminarMuerto();
                //esperarSegundos(1000, listaCPU.cabeza.getPokemon().getNombreP() + " ha sido eliminado...");
                lblVidaRestanteCPU.setText("");
                esperarSegundos(1000, "Has vencido a CPU. Ganaste la batalla.");
                //lblTexto.setText("Has vencido a CPU. Ganaste la batalla.");// Eliminamos de la lista a cabeza
                panelAtaques.setVisible(false);
                lblVidaRestanteCPU.setVisible(false);
                lblPokeActualCPU.setVisible(false);
            }
        }
        habilidadesCPU();

    }//GEN-LAST:event_btnAtaqueActionPerformed

    private void btnDefensaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDefensaActionPerformed

        //validacion cada dos turnos de ataque esp
        if (ataqueEspCooldown == 2 || ataqueEspCooldown == 1) {
            btnAtaqueEspecial.setVisible(false);
            ataqueEspCooldown--;
        } else if (ataqueEspCooldown == 0) {
            btnAtaqueEspecial.setVisible(true);
        }

        if (defensaEspCooldown == 2) {
            btnDefensaEspecial.setVisible(false);
        }
        //validacion cada dos turnos de def esp
        if (defensaEspCooldown == 2 || defensaEspCooldown == 1) {
            btnDefensaEspecial.setVisible(false);
            defensaEspCooldown--;
        } else if (defensaEspCooldown == 0) {
            btnDefensaEspecial.setVisible(true);
        }

        if (ataqueEspCooldown == 2) {
            btnAtaqueEspecial.setVisible(false);
        }
        //Jugador aumentar vida
        if (numeroBoton == 1) {
            int HPJ = listaJugador.cabeza.getPokemon().getHitPoints() + listaJugador.cabeza.getPokemon().getDefensa();//Sumamos vida de defensa
            listaJugador.cabeza.getPokemon().setHitPoints(HPJ);//actualizamos vida
            lblTexto.setText(listaJugador.cabeza.getPokemon().getNombreP() + " se ha curado: " + listaJugador.cabeza.getPokemon().getDefensa() + " de vida");
            lblVidaRestante.setText(String.valueOf(HPJ + " HP"));
            lblVidaP1.setText(String.valueOf("Vida: " + listaJugador.cabeza.getPokemon().getHitPoints()));
        } else if (numeroBoton == 2) {
            int HPJ = listaJugador.cabeza.next.getPokemon().getHitPoints() + listaJugador.cabeza.getPokemon().getDefensa();//Sumamos vida de defensa
            listaJugador.cabeza.next.getPokemon().setHitPoints(HPJ);//actualizamos vida
            lblTexto.setText(listaJugador.cabeza.next.getPokemon().getNombreP() + " se ha curado: " + listaJugador.cabeza.next.getPokemon().getDefensa() + " de vida");
            lblVidaRestante.setText(String.valueOf(HPJ + " HP"));
            lblVidaP2.setText(String.valueOf("Vida: " + listaJugador.cabeza.next.getPokemon().getHitPoints()));
        } else if (numeroBoton == 3) {
            int HPJ = listaJugador.cabeza.next.next.getPokemon().getHitPoints() + listaJugador.cabeza.next.next.getPokemon().getDefensa();//Sumamos vida de defensa
            listaJugador.cabeza.next.next.getPokemon().setHitPoints(HPJ);//actualizamos vida
            lblTexto.setText(listaJugador.cabeza.next.next.getPokemon().getNombreP() + " se ha curado: " + listaJugador.cabeza.next.next.getPokemon().getDefensa() + " de vida");
            lblVidaRestante.setText(String.valueOf(HPJ + " HP"));
            lblVidaP3.setText(String.valueOf("Vida: " + listaJugador.cabeza.next.next.getPokemon().getHitPoints()));
        } else if (numeroBoton == 4) {
            int HPJ = listaJugador.cabeza.next.next.next.getPokemon().getHitPoints() + listaJugador.cabeza.next.next.next.getPokemon().getDefensa();//Sumamos vida de defensa
            listaJugador.cabeza.next.next.next.getPokemon().setHitPoints(HPJ);//actualizamos vida
            lblTexto.setText(listaJugador.cabeza.next.next.next.getPokemon().getNombreP() + " se ha curado: " + listaJugador.cabeza.next.next.next.getPokemon().getDefensa() + " de vida");
            lblVidaRestante.setText(String.valueOf(HPJ + " HP"));
            lblVidaP4.setText(String.valueOf("Vida: " + listaJugador.cabeza.next.next.next.getPokemon().getHitPoints()));
        }
        habilidadesCPU();
    }//GEN-LAST:event_btnDefensaActionPerformed

    private void btnDefensaEspecialActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDefensaEspecialActionPerformed

        if (ataqueEspCooldown == 2 || ataqueEspCooldown == 1) {
            btnAtaqueEspecial.setVisible(false);
            ataqueEspCooldown--;
        } else if (ataqueEspCooldown == 0) {
            btnAtaqueEspecial.setVisible(true);
        }
        defensaEspCooldown = 2;
        if (defensaEspCooldown == 2) {
            btnDefensaEspecial.setVisible(false);
        }
        //Jugador aumentar vida

        if (numeroBoton == 1) {
            if (listaJugador.cabeza.getPokemon().getTipo() == NORMAL && listaCPU.cabeza.getPokemon().getTipo() == AGUA) {
                int HPJ = listaJugador.cabeza.getPokemon().getHitPoints() + 65;//Sumamos vida de defensa
                listaJugador.cabeza.getPokemon().setHitPoints(HPJ);//actualizamos vida
                esperarSegundos(1000, listaJugador.cabeza.getPokemon().getNombreP() + " se ha curado: " + 65 + " de vida");
                lblVidaRestante.setText(String.valueOf(HPJ + " HP"));
                lblVidaP1.setText(String.valueOf("Vida: " + HPJ));
                habilidadesCPU();

            } else if (listaJugador.cabeza.getPokemon().getTipo() == FUEGO && listaCPU.cabeza.getPokemon().getTipo() == NORMAL) {

                int HPJ = listaJugador.cabeza.getPokemon().getHitPoints() + 70;//Sumamos vida de defensa
                listaJugador.cabeza.getPokemon().setHitPoints(HPJ);//actualizamos vida
                esperarSegundos(1000, listaJugador.cabeza.getPokemon().getNombreP() + " se ha curado: " + 70 + " de vida");
                lblVidaRestante.setText(String.valueOf(HPJ + " HP"));
                lblVidaP1.setText(String.valueOf("Vida: " + HPJ));
                habilidadesCPU();

            } else if (listaJugador.cabeza.getPokemon().getTipo() == AGUA && listaCPU.cabeza.getPokemon().getTipo() == FUEGO) {

                int HPJ = listaJugador.cabeza.getPokemon().getHitPoints() + 75;//Sumamos vida de defensa
                listaJugador.cabeza.getPokemon().setHitPoints(HPJ);//actualizamos vida
                esperarSegundos(1000, listaJugador.cabeza.getPokemon().getNombreP() + " se ha curado: " + 75 + " de vida");
                lblVidaRestante.setText(String.valueOf(HPJ + " HP"));
                lblVidaP1.setText(String.valueOf("Vida: " + HPJ));
                habilidadesCPU();

            } else {
                int HPJ = listaJugador.cabeza.getPokemon().getHitPoints() + 75;//Sumamos vida de defensa
                listaJugador.cabeza.getPokemon().setHitPoints(HPJ);//actualizamos vida
                esperarSegundos(1000, listaJugador.cabeza.getPokemon().getNombreP() + " se ha curado: " + listaJugador.cabeza.getPokemon().getDefensaEspecial() + " de vida");
                lblVidaRestante.setText(String.valueOf(HPJ + " HP"));
                lblVidaP1.setText(String.valueOf("Vida: " + HPJ));
                habilidadesCPU();
            }

        } else if (numeroBoton == 2) {
            if (listaJugador.cabeza.next.getPokemon().getTipo() == NORMAL && listaCPU.cabeza.getPokemon().getTipo() == AGUA) {
                int HPJ = listaJugador.cabeza.next.getPokemon().getHitPoints() + 65;//Sumamos vida de defensa
                listaJugador.cabeza.next.getPokemon().setHitPoints(HPJ);//actualizamos vida
                esperarSegundos(1000, listaJugador.cabeza.next.getPokemon().getNombreP() + " se ha curado: " + 65 + " de vida");
                lblVidaRestante.setText(String.valueOf(HPJ + " HP"));
                lblVidaP2.setText(String.valueOf("Vida: " + HPJ));
                habilidadesCPU();

            } else if (listaJugador.cabeza.next.getPokemon().getTipo() == FUEGO && listaCPU.cabeza.getPokemon().getTipo() == NORMAL) {

                int HPJ = listaJugador.cabeza.next.getPokemon().getHitPoints() + 70;//Sumamos vida de defensa
                listaJugador.cabeza.next.getPokemon().setHitPoints(HPJ);//actualizamos vida
                esperarSegundos(1000, listaJugador.cabeza.next.getPokemon().getNombreP() + " se ha curado: " + 70 + " de vida");
                lblVidaRestante.setText(String.valueOf(HPJ + " HP"));
                lblVidaP2.setText(String.valueOf("Vida: " + HPJ));
                habilidadesCPU();

            } else if (listaJugador.cabeza.next.getPokemon().getTipo() == AGUA && listaCPU.cabeza.getPokemon().getTipo() == FUEGO) {

                int HPJ = listaJugador.cabeza.next.getPokemon().getHitPoints() + 75;//Sumamos vida de defensa
                listaJugador.cabeza.next.getPokemon().setHitPoints(HPJ);//actualizamos vida
                esperarSegundos(1000, listaJugador.cabeza.next.getPokemon().getNombreP() + " se ha curado: " + 75 + " de vida");
                lblVidaRestante.setText(String.valueOf(HPJ + " HP"));
                lblVidaP2.setText(String.valueOf("Vida: " + HPJ));
                habilidadesCPU();

            } else {
                int HPJ = listaJugador.cabeza.next.getPokemon().getHitPoints() + 75;//Sumamos vida de defensa
                listaJugador.cabeza.next.getPokemon().setHitPoints(HPJ);//actualizamos vida
                esperarSegundos(1000, listaJugador.cabeza.next.getPokemon().getNombreP() + " se ha curado: " + listaJugador.cabeza.next.getPokemon().getDefensaEspecial()+ " de vida");
                lblVidaRestante.setText(String.valueOf(HPJ + " HP"));
                lblVidaP2.setText(String.valueOf("Vida: " + HPJ));
                habilidadesCPU();
            }
        } else if (numeroBoton == 3) {
            if (listaJugador.cabeza.next.next.getPokemon().getTipo() == NORMAL && listaCPU.cabeza.getPokemon().getTipo() == AGUA) {
                int HPJ = listaJugador.cabeza.next.next.getPokemon().getHitPoints() + 65;//Sumamos vida de defensa
                listaJugador.cabeza.next.next.getPokemon().setHitPoints(HPJ);//actualizamos vida
                esperarSegundos(1000, listaJugador.cabeza.next.next.getPokemon().getNombreP() + " se ha curado: " + 65 + " de vida");
                lblVidaRestante.setText(String.valueOf(HPJ + " HP"));
                lblVidaP3.setText(String.valueOf("Vida: " + HPJ));
                habilidadesCPU();

            } else if (listaJugador.cabeza.next.next.getPokemon().getTipo() == FUEGO && listaCPU.cabeza.getPokemon().getTipo() == NORMAL) {

                int HPJ = listaJugador.cabeza.next.next.getPokemon().getHitPoints() + 70;//Sumamos vida de defensa
                listaJugador.cabeza.next.next.getPokemon().setHitPoints(HPJ);//actualizamos vida
                esperarSegundos(1000, listaJugador.cabeza.next.next.getPokemon().getNombreP() + " se ha curado: " + 70 + " de vida");
                lblVidaRestante.setText(String.valueOf(HPJ + " HP"));
                lblVidaP3.setText(String.valueOf("Vida: " + HPJ));
                habilidadesCPU();

            } else if (listaJugador.cabeza.next.next.getPokemon().getTipo() == AGUA && listaCPU.cabeza.getPokemon().getTipo() == FUEGO) {

                int HPJ = listaJugador.cabeza.next.next.getPokemon().getHitPoints() + 75;//Sumamos vida de defensa
                listaJugador.cabeza.next.next.getPokemon().setHitPoints(HPJ);//actualizamos vida
                esperarSegundos(1000, listaJugador.cabeza.next.next.getPokemon().getNombreP() + " se ha curado: " + 75 + " de vida");
                lblVidaRestante.setText(String.valueOf(HPJ + " HP"));
                lblVidaP3.setText(String.valueOf("Vida: " + HPJ));
                habilidadesCPU();

            } else {
                int HPJ = listaJugador.cabeza.next.next.getPokemon().getHitPoints() + 75;//Sumamos vida de defensa
                listaJugador.cabeza.next.next.getPokemon().setHitPoints(HPJ);//actualizamos vida
                esperarSegundos(1000, listaJugador.cabeza.next.next.getPokemon().getNombreP() + " se ha curado: " + listaJugador.cabeza.next.next.getPokemon().getDefensaEspecial() + " de vida");
                lblVidaRestante.setText(String.valueOf(HPJ + " HP"));
                lblVidaP3.setText(String.valueOf("Vida: " + HPJ));
                habilidadesCPU();
            }
        } else if (numeroBoton == 4) {
            if (listaJugador.cabeza.next.next.next.getPokemon().getTipo() == NORMAL && listaCPU.cabeza.getPokemon().getTipo() == AGUA) {
                int HPJ = listaJugador.cabeza.next.next.next.getPokemon().getHitPoints() + 65;//Sumamos vida de defensa
                listaJugador.cabeza.next.next.next.getPokemon().setHitPoints(HPJ);//actualizamos vida
                esperarSegundos(1000, listaJugador.cabeza.next.next.next.getPokemon().getNombreP() + " se ha curado: " + 65 + " de vida");
                lblVidaRestante.setText(String.valueOf(HPJ + " HP"));
                lblVidaP4.setText(String.valueOf("Vida: " + HPJ));
                habilidadesCPU();

            } else if (listaJugador.cabeza.next.next.next.getPokemon().getTipo() == FUEGO && listaCPU.cabeza.getPokemon().getTipo() == NORMAL) {

                int HPJ = listaJugador.cabeza.next.next.next.getPokemon().getHitPoints() + 70;//Sumamos vida de defensa
                listaJugador.cabeza.next.next.next.getPokemon().setHitPoints(HPJ);//actualizamos vida
                esperarSegundos(1000, listaJugador.cabeza.next.next.next.getPokemon().getNombreP() + " se ha curado: " + 70 + " de vida");
                lblVidaRestante.setText(String.valueOf(HPJ + " HP"));
                lblVidaP4.setText(String.valueOf("Vida: " + HPJ));
                habilidadesCPU();

            } else if (listaJugador.cabeza.next.next.next.getPokemon().getTipo() == AGUA && listaCPU.cabeza.getPokemon().getTipo() == FUEGO) {

                int HPJ = listaJugador.cabeza.next.next.next.getPokemon().getHitPoints() + 75;//Sumamos vida de defensa
                listaJugador.cabeza.next.next.next.getPokemon().setHitPoints(HPJ);//actualizamos vida
                esperarSegundos(1000, listaJugador.cabeza.next.next.next.getPokemon().getNombreP() + " se ha curado: " + 75 + " de vida");
                lblVidaRestante.setText(String.valueOf(HPJ + " HP"));
                lblVidaP4.setText(String.valueOf("Vida: " + HPJ));
                habilidadesCPU();

            } else {
                int HPJ = listaJugador.cabeza.next.next.next.getPokemon().getHitPoints() + 75;//Sumamos vida de defensa
                listaJugador.cabeza.next.next.next.getPokemon().setHitPoints(HPJ);//actualizamos vida
                esperarSegundos(1000, listaJugador.cabeza.next.next.next.getPokemon().getNombreP() + " se ha curado: " + listaJugador.cabeza.next.next.next.getPokemon().getDefensaEspecial() + " de vida");
                lblVidaRestante.setText(String.valueOf(HPJ + " HP"));
                lblVidaP4.setText(String.valueOf("Vida: " + HPJ));
                habilidadesCPU();

            }
        }

       

    }//GEN-LAST:event_btnDefensaEspecialActionPerformed

    private void habilidadesCPU() {
        //esperarSegundos(2000,"");
        if (listaCPU.cabeza != null) {
            int HP_CPU;
            int cantidadHabilidades = 3;
            int habilidadRandom = (int) Math.round(Math.random() * cantidadHabilidades);// Random
            //esperarSegundos(2000,"");
            switch (habilidadRandom) { // CAMBIAR A RANDOM
                case 0:
                    esperarSegundos(1000, "");
                    if (numeroBoton == 1) {
                        ataqueCPUBoton1();
                    } else if (numeroBoton == 2) {
                        ataqueCPUBoton2();
                    } else if (numeroBoton == 3) {
                        ataqueCPUBoton3();
                    } else if (numeroBoton == 4) {
                        ataqueCPUBoton4();
                    }
                    break;

                case 1:
                    esperarSegundos(1000, "");
                    if (numeroBoton == 1) {
                        ataqueCPUBoton1();
                    } else if (numeroBoton == 2) {
                        ataqueCPUBoton2();
                    } else if (numeroBoton == 3) {
                        ataqueCPUBoton3();
                    } else if (numeroBoton == 4) {
                        ataqueCPUBoton4();
                    }
                    break;
                case 2:
                    esperarSegundos(1000, "");
                    if (numeroBoton == 1) {

                        HP_CPU = listaCPU.cabeza.getPokemon().getHitPoints() + listaCPU.cabeza.getPokemon().getDefensa();//Sumamos vida de defensa
                        listaCPU.cabeza.getPokemon().setHitPoints(HP_CPU);//actualizamos vida
                        esperarSegundos(1000, listaCPU.cabeza.getPokemon().getNombreP() + " se ha curado: " + listaCPU.cabeza.getPokemon().getDefensa() + " de vida");
                        lblVidaRestanteCPU.setText(String.valueOf(HP_CPU + " HP"));
                        lblPokeActualCPU.setText(listaCPU.cabeza.getPokemon().getNombreP());
                        //revisar el caso
                        if (listaJugador.cabeza.getPokemon().getHitPoints() <= 0) {
                            lblVidaRestante.setText("");
                            lblVidaP2.setText("");
                            esperarSegundos(1000, listaJugador.cabeza.getPokemon().getNombreP() + " ha sido derrotado, selecciona otro pokemon");
                            panelAtaques.setVisible(false);
                            panelSeleccionPokemon.setVisible(true);
                        }
                    } else if (numeroBoton == 2) {
                        HP_CPU = listaCPU.cabeza.getPokemon().getHitPoints() + listaCPU.cabeza.getPokemon().getDefensa();//Sumamos vida de defensa
                        listaCPU.cabeza.getPokemon().setHitPoints(HP_CPU);//actualizamos vida
                        esperarSegundos(1000, listaCPU.cabeza.getPokemon().getNombreP() + " se ha curado: " + listaCPU.cabeza.getPokemon().getDefensa() + " de vida");
                        lblVidaRestanteCPU.setText(String.valueOf(HP_CPU + " HP"));
                        lblPokeActualCPU.setText(listaCPU.cabeza.getPokemon().getNombreP());
                        //revisar el caso
                        if (listaJugador.cabeza.next.getPokemon().getHitPoints() <= 0) {
                            lblVidaRestante.setText("");
                            lblVidaP2.setText("");
                            esperarSegundos(1000, listaJugador.cabeza.next.getPokemon().getNombreP() + " ha sido derrotado, selecciona otro pokemon");
                            panelAtaques.setVisible(false);
                            panelSeleccionPokemon.setVisible(true);
                        }
                    } else if (numeroBoton == 3) {
                        HP_CPU = listaCPU.cabeza.getPokemon().getHitPoints() + listaCPU.cabeza.getPokemon().getDefensa();//Sumamos vida de defensa
                        listaCPU.cabeza.getPokemon().setHitPoints(HP_CPU);//actualizamos vida
                        esperarSegundos(1000, listaCPU.cabeza.getPokemon().getNombreP() + " se ha curado: " + listaCPU.cabeza.getPokemon().getDefensa() + " de vida");
                        lblVidaRestanteCPU.setText(String.valueOf(HP_CPU + " HP"));
                        lblPokeActualCPU.setText(listaCPU.cabeza.getPokemon().getNombreP());
                        //revisar el caso
                        if (listaJugador.cabeza.next.next.getPokemon().getHitPoints() <= 0) {
                            lblVidaRestante.setText("");
                            lblVidaP2.setText("");
                            esperarSegundos(1000, listaJugador.cabeza.next.next.getPokemon().getNombreP() + " ha sido derrotado, selecciona otro pokemon");
                            panelAtaques.setVisible(false);
                            panelSeleccionPokemon.setVisible(true);
                        }
                    } else if (numeroBoton == 4) {
                        HP_CPU = listaCPU.cabeza.getPokemon().getHitPoints() + listaCPU.cabeza.getPokemon().getDefensa();//Sumamos vida de defensa
                        listaCPU.cabeza.getPokemon().setHitPoints(HP_CPU);//actualizamos vida
                        esperarSegundos(1000, listaCPU.cabeza.getPokemon().getNombreP() + " se ha curado: " + listaCPU.cabeza.getPokemon().getDefensa() + " de vida");
                        lblVidaRestanteCPU.setText(String.valueOf(HP_CPU + " HP"));
                        lblPokeActualCPU.setText(listaCPU.cabeza.getPokemon().getNombreP());
                        //revisar el caso
                        if (listaJugador.cabeza.next.next.next.getPokemon().getHitPoints() <= 0) {
                            lblVidaRestante.setText("");
                            lblVidaP2.setText("");
                            esperarSegundos(1000, listaJugador.cabeza.next.next.next.getPokemon().getNombreP() + " ha sido derrotado, selecciona otro pokemon");
                            panelAtaques.setVisible(false);
                            panelSeleccionPokemon.setVisible(true);
                        }
                    }
                    break;
                case 3:
                    esperarSegundos(1000, "");
                    if (numeroBoton == 1) {
                        if (listaJugador.cabeza.getPokemon().getTipo() == AGUA && listaCPU.cabeza.getPokemon().getTipo() == NORMAL) {

                            HP_CPU = listaCPU.cabeza.getPokemon().getHitPoints() + 65;//Sumamos vida de defensa
                            listaCPU.cabeza.getPokemon().setHitPoints(HP_CPU);//actualizamos vida
                            esperarSegundos(1000, listaCPU.cabeza.getPokemon().getNombreP() + " se ha curado: " + 65 + " de vida");
                            lblVidaRestanteCPU.setText(String.valueOf(HP_CPU + " HP"));
                            lblPokeActualCPU.setText(listaCPU.cabeza.getPokemon().getNombreP());
                            //revisar el caso
                            if (listaJugador.cabeza.getPokemon().getHitPoints() <= 0) {
                                lblVidaRestante.setText("");
                                lblVidaP2.setText("");
                                esperarSegundos(1000, listaJugador.cabeza.getPokemon().getNombreP() + " ha sido derrotado, selecciona otro pokemon");
                                panelAtaques.setVisible(false);
                                panelSeleccionPokemon.setVisible(true);
                            }
                        } else if (listaJugador.cabeza.getPokemon().getTipo() == NORMAL && listaCPU.cabeza.getPokemon().getTipo() == FUEGO) {
                            HP_CPU = listaCPU.cabeza.getPokemon().getHitPoints() + 70;//Sumamos vida de defensa
                            listaCPU.cabeza.getPokemon().setHitPoints(HP_CPU);//actualizamos vida
                            esperarSegundos(1000, listaCPU.cabeza.getPokemon().getNombreP() + " se ha curado: " + 70 + " de vida");
                            lblVidaRestanteCPU.setText(String.valueOf(HP_CPU + " HP"));
                            lblPokeActualCPU.setText(listaCPU.cabeza.getPokemon().getNombreP());
                            //revisar el caso
                            if (listaJugador.cabeza.getPokemon().getHitPoints() <= 0) {
                                lblVidaRestante.setText("");
                                lblVidaP2.setText("");
                                esperarSegundos(1000, listaJugador.cabeza.getPokemon().getNombreP() + " ha sido derrotado, selecciona otro pokemon");
                                panelAtaques.setVisible(false);
                                panelSeleccionPokemon.setVisible(true);
                            }
                        } else if (listaJugador.cabeza.getPokemon().getTipo() == FUEGO && listaCPU.cabeza.getPokemon().getTipo() == AGUA) {
                            HP_CPU = listaCPU.cabeza.getPokemon().getHitPoints() + 75;//Sumamos vida de defensa
                            listaCPU.cabeza.getPokemon().setHitPoints(HP_CPU);//actualizamos vida
                            esperarSegundos(1000, listaCPU.cabeza.getPokemon().getNombreP() + " se ha curado: " + 75 + " de vida");
                            lblVidaRestanteCPU.setText(String.valueOf(HP_CPU + " HP"));
                            lblPokeActualCPU.setText(listaCPU.cabeza.getPokemon().getNombreP());
                            //revisar el caso
                            if (listaJugador.cabeza.getPokemon().getHitPoints() <= 0) {
                                lblVidaRestante.setText("");
                                lblVidaP2.setText("");
                                esperarSegundos(1000, listaJugador.cabeza.getPokemon().getNombreP() + " ha sido derrotado, selecciona otro pokemon");
                                panelAtaques.setVisible(false);
                                panelSeleccionPokemon.setVisible(true);
                            }
                        } else {
                            System.out.println("");
                        }

                    } else if (numeroBoton == 2) {//pokemon boton 2
                        if (listaJugador.cabeza.next.getPokemon().getTipo() == AGUA && listaCPU.cabeza.getPokemon().getTipo() == NORMAL) {

                            HP_CPU = listaCPU.cabeza.getPokemon().getHitPoints() + 65;//Sumamos vida de defensa
                            listaCPU.cabeza.getPokemon().setHitPoints(HP_CPU);//actualizamos vida
                            esperarSegundos(1000, listaCPU.cabeza.getPokemon().getNombreP() + " se ha curado: " + 65 + " de vida");
                            lblVidaRestanteCPU.setText(String.valueOf(HP_CPU + " HP"));
                            lblPokeActualCPU.setText(listaCPU.cabeza.getPokemon().getNombreP());
                            //revisar el caso
                            if (listaJugador.cabeza.next.getPokemon().getHitPoints() <= 0) {
                                lblVidaRestante.setText("");
                                lblVidaP2.setText("");
                                esperarSegundos(1000, listaJugador.cabeza.next.getPokemon().getNombreP() + " ha sido derrotado, selecciona otro pokemon");
                                panelAtaques.setVisible(false);
                                panelSeleccionPokemon.setVisible(true);
                            }
                        } else if (listaJugador.cabeza.next.getPokemon().getTipo() == NORMAL && listaCPU.cabeza.getPokemon().getTipo() == FUEGO) {
                            HP_CPU = listaCPU.cabeza.getPokemon().getHitPoints() + 70;//Sumamos vida de defensa
                            listaCPU.cabeza.getPokemon().setHitPoints(HP_CPU);//actualizamos vida
                            esperarSegundos(1000, listaCPU.cabeza.getPokemon().getNombreP() + " se ha curado: " + 70 + " de vida");
                            lblVidaRestanteCPU.setText(String.valueOf(HP_CPU + " HP"));
                            lblPokeActualCPU.setText(listaCPU.cabeza.getPokemon().getNombreP());
                            //revisar el caso
                            if (listaJugador.cabeza.next.getPokemon().getHitPoints() <= 0) {
                                lblVidaRestante.setText("");
                                lblVidaP2.setText("");
                                esperarSegundos(1000, listaJugador.cabeza.next.getPokemon().getNombreP() + " ha sido derrotado, selecciona otro pokemon");
                                panelAtaques.setVisible(false);
                                panelSeleccionPokemon.setVisible(true);
                            }
                        } else if (listaJugador.cabeza.next.getPokemon().getTipo() == FUEGO && listaCPU.cabeza.getPokemon().getTipo() == AGUA) {
                            HP_CPU = listaCPU.cabeza.getPokemon().getHitPoints() + 75;//Sumamos vida de defensa
                            listaCPU.cabeza.getPokemon().setHitPoints(HP_CPU);//actualizamos vida
                            esperarSegundos(1000, listaCPU.cabeza.getPokemon().getNombreP() + " se ha curado: " + 75 + " de vida");
                            lblVidaRestanteCPU.setText(String.valueOf(HP_CPU + " HP"));
                            lblPokeActualCPU.setText(listaCPU.cabeza.getPokemon().getNombreP());
                            //revisar el caso
                            if (listaJugador.cabeza.next.getPokemon().getHitPoints() <= 0) {
                                lblVidaRestante.setText("");
                                lblVidaP2.setText("");
                                esperarSegundos(1000, listaJugador.cabeza.next.getPokemon().getNombreP() + " ha sido derrotado, selecciona otro pokemon");
                                panelAtaques.setVisible(false);
                                panelSeleccionPokemon.setVisible(true);
                            }
                        } else {
                            System.out.println("");
                        }
                    } else if (numeroBoton == 3) {
                        if (listaJugador.cabeza.next.next.getPokemon().getTipo() == AGUA && listaCPU.cabeza.getPokemon().getTipo() == NORMAL) {

                            HP_CPU = listaCPU.cabeza.getPokemon().getHitPoints() + 65;//Sumamos vida de defensa
                            listaCPU.cabeza.getPokemon().setHitPoints(HP_CPU);//actualizamos vida
                            esperarSegundos(1000, listaCPU.cabeza.getPokemon().getNombreP() + " se ha curado: " + 65 + " de vida");
                            lblVidaRestanteCPU.setText(String.valueOf(HP_CPU + " HP"));
                            lblPokeActualCPU.setText(listaCPU.cabeza.getPokemon().getNombreP());
                            //revisar el caso
                            if (listaJugador.cabeza.next.next.getPokemon().getHitPoints() <= 0) {
                                lblVidaRestante.setText("");
                                lblVidaP2.setText("");
                                esperarSegundos(1000, listaJugador.cabeza.next.next.getPokemon().getNombreP() + " ha sido derrotado, selecciona otro pokemon");
                                panelAtaques.setVisible(false);
                                panelSeleccionPokemon.setVisible(true);
                            }
                        } else if (listaJugador.cabeza.next.next.getPokemon().getTipo() == NORMAL && listaCPU.cabeza.getPokemon().getTipo() == FUEGO) {
                            HP_CPU = listaCPU.cabeza.getPokemon().getHitPoints() + 70;//Sumamos vida de defensa
                            listaCPU.cabeza.getPokemon().setHitPoints(HP_CPU);//actualizamos vida
                            esperarSegundos(1000, listaCPU.cabeza.getPokemon().getNombreP() + " se ha curado: " + 70 + " de vida");
                            lblVidaRestanteCPU.setText(String.valueOf(HP_CPU + " HP"));
                            lblPokeActualCPU.setText(listaCPU.cabeza.getPokemon().getNombreP());
                            //revisar el caso
                            if (listaJugador.cabeza.next.next.getPokemon().getHitPoints() <= 0) {
                                lblVidaRestante.setText("");
                                lblVidaP2.setText("");
                                esperarSegundos(1000, listaJugador.cabeza.next.next.getPokemon().getNombreP() + " ha sido derrotado, selecciona otro pokemon");
                                panelAtaques.setVisible(false);
                                panelSeleccionPokemon.setVisible(true);
                            }
                        } else if (listaJugador.cabeza.next.next.getPokemon().getTipo() == FUEGO && listaCPU.cabeza.getPokemon().getTipo() == AGUA) {
                            HP_CPU = listaCPU.cabeza.getPokemon().getHitPoints() + 75;//Sumamos vida de defensa
                            listaCPU.cabeza.getPokemon().setHitPoints(HP_CPU);//actualizamos vida
                            esperarSegundos(1000, listaCPU.cabeza.getPokemon().getNombreP() + " se ha curado: " + 75 + " de vida");
                            lblVidaRestanteCPU.setText(String.valueOf(HP_CPU + " HP"));
                            lblPokeActualCPU.setText(listaCPU.cabeza.getPokemon().getNombreP());
                            //revisar el caso
                            if (listaJugador.cabeza.next.next.getPokemon().getHitPoints() <= 0) {
                                lblVidaRestante.setText("");
                                lblVidaP2.setText("");
                                esperarSegundos(1000, listaJugador.cabeza.next.next.getPokemon().getNombreP() + " ha sido derrotado, selecciona otro pokemon");
                                panelAtaques.setVisible(false);
                                panelSeleccionPokemon.setVisible(true);
                            }
                        } else {
                            System.out.println("");
                        }
                    } else if (numeroBoton == 4) {
                        if (listaJugador.cabeza.next.next.next.getPokemon().getTipo() == AGUA && listaCPU.cabeza.getPokemon().getTipo() == NORMAL) {

                            HP_CPU = listaCPU.cabeza.getPokemon().getHitPoints() + 65;//Sumamos vida de defensa
                            listaCPU.cabeza.getPokemon().setHitPoints(HP_CPU);//actualizamos vida
                            esperarSegundos(1000, listaCPU.cabeza.getPokemon().getNombreP() + " se ha curado: " + 65 + " de vida");
                            lblVidaRestanteCPU.setText(String.valueOf(HP_CPU + " HP"));
                            lblPokeActualCPU.setText(listaCPU.cabeza.getPokemon().getNombreP());
                            //revisar el caso
                            if (listaJugador.cabeza.next.next.next.getPokemon().getHitPoints() <= 0) {
                                lblVidaRestante.setText("");
                                lblVidaP2.setText("");
                                esperarSegundos(1000, listaJugador.cabeza.next.next.next.getPokemon().getNombreP() + " ha sido derrotado, selecciona otro pokemon");
                                panelAtaques.setVisible(false);
                                panelSeleccionPokemon.setVisible(true);
                            }
                        } else if (listaJugador.cabeza.next.next.next.getPokemon().getTipo() == NORMAL && listaCPU.cabeza.getPokemon().getTipo() == FUEGO) {
                            HP_CPU = listaCPU.cabeza.getPokemon().getHitPoints() + 70;//Sumamos vida de defensa
                            listaCPU.cabeza.getPokemon().setHitPoints(HP_CPU);//actualizamos vida
                            esperarSegundos(1000, listaCPU.cabeza.getPokemon().getNombreP() + " se ha curado: " + 70 + " de vida");
                            lblVidaRestanteCPU.setText(String.valueOf(HP_CPU + " HP"));
                            lblPokeActualCPU.setText(listaCPU.cabeza.getPokemon().getNombreP());
                            //revisar el caso
                            if (listaJugador.cabeza.next.next.next.getPokemon().getHitPoints() <= 0) {
                                lblVidaRestante.setText("");
                                lblVidaP2.setText("");
                                esperarSegundos(1000, listaJugador.cabeza.next.next.next.getPokemon().getNombreP() + " ha sido derrotado, selecciona otro pokemon");
                                panelAtaques.setVisible(false);
                                panelSeleccionPokemon.setVisible(true);
                            }
                        } else if (listaJugador.cabeza.next.next.next.getPokemon().getTipo() == FUEGO && listaCPU.cabeza.getPokemon().getTipo() == AGUA) {
                            HP_CPU = listaCPU.cabeza.next.next.getPokemon().getHitPoints() + 75;//Sumamos vida de defensa
                            listaCPU.cabeza.getPokemon().setHitPoints(HP_CPU);//actualizamos vida
                            esperarSegundos(1000, listaCPU.cabeza.getPokemon().getNombreP() + " se ha curado: " + 75 + " de vida");
                            lblVidaRestanteCPU.setText(String.valueOf(HP_CPU + " HP"));
                            lblPokeActualCPU.setText(listaCPU.cabeza.getPokemon().getNombreP());
                            //revisar el caso
                            if (listaJugador.cabeza.next.next.next.getPokemon().getHitPoints() <= 0) {
                                lblVidaRestante.setText("");
                                lblVidaP2.setText("");
                                esperarSegundos(1000, listaJugador.cabeza.next.next.next.getPokemon().getNombreP() + " ha sido derrotado, selecciona otro pokemon");
                                panelAtaques.setVisible(false);
                                panelSeleccionPokemon.setVisible(true);
                            }
                        } else {
                            System.out.println("");
                        }
                    }
                    break;

                default:
                    System.out.println("CPU ha fallado el ataque");
            }
        } else if (listaCPU.cabeza == null) {
            esperarSegundos(1000, "Has vencido a CPU. Ganaste la batalla.");
        }
    }

    //Metodos de ataque
    public void ataqueCPUBoton1() {//si el boton 1 es el actual pokemon en batalla
        int HPJ = listaJugador.cabeza.getPokemon().getHitPoints() - listaCPU.cabeza.getPokemon().getAtaque();//restamos vida de ataque
        listaJugador.cabeza.getPokemon().setHitPoints(HPJ);//actualizamos vida
        esperarSegundos(1000, listaJugador.cabeza.getPokemon().getNombreP() + " ha recibido: " + listaCPU.cabeza.getPokemon().getAtaque() + " de daño");
        lblVidaRestante.setText(String.valueOf(HPJ + " HP"));
        lblVidaP1.setText(String.valueOf("Vida: " + HPJ));
        if (listaJugador.cabeza.getPokemon().getHitPoints() <= 0) {
            lblVidaRestante.setText("");
            lblVidaP1.setText("Derrotado");
            esperarSegundos(1000, listaJugador.cabeza.getPokemon().getNombreP() + " ha sido derrotado");
            panelAtaques.setVisible(false);
            panelSeleccionPokemon.setVisible(true);
        }
        if (listaJugador.cabeza.getPokemon().getHitPoints() <= 0
                && listaJugador.cabeza.next.getPokemon().getHitPoints() <= 0
                && listaJugador.cabeza.next.next.getPokemon().getHitPoints() <= 0
                && listaJugador.cabeza.next.next.next.getPokemon().getHitPoints() <= 0) {

            esperarSegundos(1000, listaJugador.cabeza.getPokemon().getNombreP() + " ha sido derrotado. CPU ha ganado la batalla.");

        }
    }

    public void ataqueCPUBoton2() {
        esperarSegundos(1000, "");
        int HPJ = listaJugador.cabeza.next.getPokemon().getHitPoints() - listaCPU.cabeza.getPokemon().getAtaque();//restamos vida de ataque
        listaJugador.cabeza.next.getPokemon().setHitPoints(HPJ);//actualizamos vida
        esperarSegundos(1000, listaJugador.cabeza.next.getPokemon().getNombreP() + " ha recibido: " + listaCPU.cabeza.next.getPokemon().getAtaque() + " de daño");
        lblVidaRestante.setText(String.valueOf(HPJ + " HP"));
        lblVidaP2.setText(String.valueOf("Vida: " + HPJ));
        if (listaJugador.cabeza.next.getPokemon().getHitPoints() <= 0) {
            lblVidaRestante.setText("");
            lblVidaP2.setText("Derrotado");
            esperarSegundos(1000, listaJugador.cabeza.next.getPokemon().getNombreP() + " ha sido derrotado");
            panelAtaques.setVisible(false);
            panelSeleccionPokemon.setVisible(true);
        }
        if (listaJugador.cabeza.getPokemon().getHitPoints() <= 0
                && listaJugador.cabeza.next.getPokemon().getHitPoints() <= 0
                && listaJugador.cabeza.next.next.getPokemon().getHitPoints() <= 0
                && listaJugador.cabeza.next.next.next.getPokemon().getHitPoints() <= 0) {

            esperarSegundos(1000, listaJugador.cabeza.next.getPokemon().getNombreP() + " ha sido derrotado. CPU ha ganado la batalla.");

        }
    }

    public void ataqueCPUBoton3() {
        esperarSegundos(1000, "");
        int HPJ = listaJugador.cabeza.next.next.getPokemon().getHitPoints() - listaCPU.cabeza.getPokemon().getAtaque();//restamos vida de ataque
        listaJugador.cabeza.next.next.getPokemon().setHitPoints(HPJ);//actualizamos vida
        esperarSegundos(1000, listaJugador.cabeza.next.next.getPokemon().getNombreP() + " ha recibido: " + listaCPU.cabeza.getPokemon().getAtaque() + " de daño");
        lblVidaRestante.setText(String.valueOf(HPJ + " HP"));
        lblVidaP3.setText(String.valueOf("Vida: " + HPJ));
        if (listaJugador.cabeza.next.next.getPokemon().getHitPoints() <= 0) {
            lblVidaRestante.setText("");
            lblVidaP3.setText("Derrotado");
            esperarSegundos(1000, listaJugador.cabeza.next.next.getPokemon().getNombreP() + " ha sido derrotado");
            panelAtaques.setVisible(false);
            panelSeleccionPokemon.setVisible(true);
        }
        if (listaJugador.cabeza.getPokemon().getHitPoints() <= 0
                && listaJugador.cabeza.next.getPokemon().getHitPoints() <= 0
                && listaJugador.cabeza.next.next.getPokemon().getHitPoints() <= 0
                && listaJugador.cabeza.next.next.next.getPokemon().getHitPoints() <= 0) {

            esperarSegundos(1000, listaJugador.cabeza.next.next.getPokemon().getNombreP() + " ha sido derrotado. CPU ha ganado la batalla.");

        }
    }

    public void ataqueCPUBoton4() {
        esperarSegundos(1000, "");
        int HPJ = listaJugador.cabeza.next.next.next.getPokemon().getHitPoints() - listaCPU.cabeza.getPokemon().getAtaque();//restamos vida de ataque
        listaJugador.cabeza.next.next.next.getPokemon().setHitPoints(HPJ);//actualizamos vida
        esperarSegundos(1000, listaJugador.cabeza.next.next.next.getPokemon().getNombreP() + " ha recibido: " + listaCPU.cabeza.getPokemon().getAtaque() + " de daño");
        lblVidaRestante.setText(String.valueOf(HPJ + " HP"));
        lblVidaP4.setText(String.valueOf("Vida: " + HPJ));
        if (listaJugador.cabeza.next.next.next.getPokemon().getHitPoints() <= 0) {
            lblVidaRestante.setText("");
            lblVidaP4.setText("Derrotado");
            esperarSegundos(1000, listaJugador.cabeza.next.next.next.getPokemon().getNombreP() + " ha sido derrotado");
            panelAtaques.setVisible(false);
            panelSeleccionPokemon.setVisible(true);
        }
        if (listaJugador.cabeza.getPokemon().getHitPoints() <= 0
                && listaJugador.cabeza.next.getPokemon().getHitPoints() <= 0
                && listaJugador.cabeza.next.next.getPokemon().getHitPoints() <= 0
                && listaJugador.cabeza.next.next.next.getPokemon().getHitPoints() <= 0) {

            esperarSegundos(1000, listaJugador.cabeza.next.next.next.getPokemon().getNombreP() + " ha sido derrotado. CPU ha ganado la batalla.");

        }
    }

    //Metodos de Ataque Especial
    public void ataqueEspecialCPUBoton1() {//si el boton 1 es el actual pokemon en batalla
        esperarSegundos(1000, "");
        // DAÑO EN CASO DE HACER COUNTER
        if (listaCPU.cabeza.getPokemon().getTipo() == AGUA && listaJugador.cabeza.getPokemon().getTipo() == FUEGO) {
            int HPJ = listaJugador.cabeza.getPokemon().getHitPoints() - listaCPU.cabeza.getPokemon().getAtaqueEspecial() + 14;//restamos vida de ataque
            listaJugador.cabeza.getPokemon().setHitPoints(HPJ);//actualizamos vida
            esperarSegundos(1000, listaJugador.cabeza.getPokemon().getNombreP() + " ha recibido: " + listaCPU.cabeza.getPokemon().getAtaqueEspecial() + " de daño especial");
            lblVidaRestante.setText(String.valueOf(HPJ + " HP"));
            lblVidaP1.setText(String.valueOf("Vida: " + HPJ));
            if (listaJugador.cabeza.getPokemon().getHitPoints() <= 0) {
                lblVidaRestante.setText("");
                lblVidaP1.setText("Derrotado");
                esperarSegundos(1000, listaJugador.cabeza.getPokemon().getNombreP() + " ha sido derrotado");
                panelAtaques.setVisible(false);
                panelSeleccionPokemon.setVisible(true);
                btnPokemonJ1.setVisible(false);
            }
            if (listaJugador.cabeza.getPokemon().getHitPoints() <= 0
                    && listaJugador.cabeza.next.getPokemon().getHitPoints() <= 0
                    && listaJugador.cabeza.next.next.getPokemon().getHitPoints() <= 0
                    && listaJugador.cabeza.next.next.next.getPokemon().getHitPoints() <= 0) {
                esperarSegundos(1000, listaJugador.cabeza.getPokemon().getNombreP() + " ha sido derrotado. CPU ha ganado la batalla.");
            }
        } // SI SON DEL MISMO TIPO
        else if (listaCPU.cabeza.getPokemon().getTipo() == AGUA && listaJugador.cabeza.getPokemon().getTipo() == AGUA) {
            int HPJ = listaJugador.cabeza.getPokemon().getHitPoints() - listaCPU.cabeza.getPokemon().getAtaqueEspecial() - 14;//restamos vida de ataque
            listaJugador.cabeza.getPokemon().setHitPoints(HPJ);//actualizamos vida
            esperarSegundos(1000, listaJugador.cabeza.getPokemon().getNombreP() + " ha recibido: " + listaCPU.cabeza.getPokemon().getAtaqueEspecial() + " de daño especial");
            lblVidaRestante.setText(String.valueOf(HPJ + " HP"));
            lblVidaP1.setText(String.valueOf("Vida: " + HPJ));
            if (listaJugador.cabeza.getPokemon().getHitPoints() <= 0) {
                lblVidaRestante.setText("");
                lblVidaP1.setText("Derrotado");
                esperarSegundos(1000, listaJugador.cabeza.getPokemon().getNombreP() + " ha sido derrotado");
                panelAtaques.setVisible(false);
                panelSeleccionPokemon.setVisible(true);
                btnPokemonJ1.setVisible(false);
            }
            if (listaJugador.cabeza.getPokemon().getHitPoints() <= 0
                    && listaJugador.cabeza.next.getPokemon().getHitPoints() <= 0
                    && listaJugador.cabeza.next.next.getPokemon().getHitPoints() <= 0
                    && listaJugador.cabeza.next.next.next.getPokemon().getHitPoints() <= 0) {
                esperarSegundos(1000, listaJugador.cabeza.getPokemon().getNombreP() + " ha sido derrotado. CPU ha ganado la batalla.");
            }
        } else if (listaCPU.cabeza.getPokemon().getTipo() == FUEGO && listaJugador.cabeza.getPokemon().getTipo() == FUEGO) {
            int HPJ = listaJugador.cabeza.getPokemon().getHitPoints() - listaCPU.cabeza.getPokemon().getAtaqueEspecial() - 14;//restamos vida de ataque
            listaJugador.cabeza.getPokemon().setHitPoints(HPJ);//actualizamos vida
            esperarSegundos(1000, listaJugador.cabeza.getPokemon().getNombreP() + " ha recibido: " + listaCPU.cabeza.getPokemon().getAtaqueEspecial() + " de daño especial");
            lblVidaRestante.setText(String.valueOf(HPJ + " HP"));
            lblVidaP1.setText(String.valueOf("Vida: " + HPJ));
            if (listaJugador.cabeza.getPokemon().getHitPoints() <= 0) {
                lblVidaRestante.setText("");
                lblVidaP1.setText("Derrotado");
                esperarSegundos(1000, listaJugador.cabeza.getPokemon().getNombreP() + " ha sido derrotado");
                panelAtaques.setVisible(false);
                panelSeleccionPokemon.setVisible(true);
                btnPokemonJ1.setVisible(false);
            }
            if (listaJugador.cabeza.getPokemon().getHitPoints() <= 0
                    && listaJugador.cabeza.next.getPokemon().getHitPoints() <= 0
                    && listaJugador.cabeza.next.next.getPokemon().getHitPoints() <= 0
                    && listaJugador.cabeza.next.next.next.getPokemon().getHitPoints() <= 0) {
                esperarSegundos(1000, listaJugador.cabeza.getPokemon().getNombreP() + " ha sido derrotado. CPU ha ganado la batalla.");
            }
        } // SI NO SON COUNTER O SON NEUTRALES
        else {
            int HPJ = listaJugador.cabeza.getPokemon().getHitPoints() - listaCPU.cabeza.getPokemon().getAtaqueEspecial();//restamos vida de ataque
            listaJugador.cabeza.getPokemon().setHitPoints(HPJ);//actualizamos vida
            esperarSegundos(1000, listaJugador.cabeza.getPokemon().getNombreP() + " ha recibido: " + listaCPU.cabeza.getPokemon().getAtaqueEspecial() + " de daño");
            lblVidaRestante.setText(String.valueOf(HPJ + " HP"));
            lblVidaP1.setText(String.valueOf("Vida: " + HPJ));
            if (listaJugador.cabeza.getPokemon().getHitPoints() <= 0) {
                lblVidaRestante.setText("");
                lblVidaP1.setText("Derrotado");
                esperarSegundos(1000, listaJugador.cabeza.getPokemon().getNombreP() + " ha sido derrotado");
                panelAtaques.setVisible(false);
                panelSeleccionPokemon.setVisible(true);
                btnPokemonJ1.setVisible(false);
            }
            if (listaJugador.cabeza.getPokemon().getHitPoints() <= 0
                    && listaJugador.cabeza.next.getPokemon().getHitPoints() <= 0
                    && listaJugador.cabeza.next.next.getPokemon().getHitPoints() <= 0
                    && listaJugador.cabeza.next.next.next.getPokemon().getHitPoints() <= 0) {
                esperarSegundos(1000, listaJugador.cabeza.getPokemon().getNombreP() + " ha sido derrotado. CPU ha ganado la batalla.");
            }
        }
    }

    public void ataqueEspecialCPUBoton2() {
        esperarSegundos(1000, "");
        // DAÑO EN CASO DE HACER COUNTER
        if (listaCPU.cabeza.getPokemon().getTipo() == AGUA && listaJugador.cabeza.getPokemon().getTipo() == FUEGO) {
            int HPJ = listaJugador.cabeza.next.getPokemon().getHitPoints() - listaCPU.cabeza.getPokemon().getAtaqueEspecial() + 14;//restamos vida de ataque
            listaJugador.cabeza.getPokemon().setHitPoints(HPJ);//actualizamos vida
            esperarSegundos(1000, listaJugador.cabeza.next.getPokemon().getNombreP() + " ha recibido: " + listaCPU.cabeza.getPokemon().getAtaqueEspecial() + " de daño especial");
            lblVidaRestante.setText(String.valueOf(HPJ + " HP"));
            lblVidaP2.setText(String.valueOf("Vida: " + HPJ));
            if (listaJugador.cabeza.next.getPokemon().getHitPoints() <= 0) {
                lblVidaRestante.setText("");
                lblVidaP2.setText("Derrotado");
                esperarSegundos(1000, listaJugador.cabeza.next.getPokemon().getNombreP() + " ha sido derrotado");
                panelAtaques.setVisible(false);
                panelSeleccionPokemon.setVisible(true);
                btnPokemonJ2.setVisible(false);
            }
            if (listaJugador.cabeza.getPokemon().getHitPoints() <= 0
                    && listaJugador.cabeza.next.getPokemon().getHitPoints() <= 0
                    && listaJugador.cabeza.next.next.getPokemon().getHitPoints() <= 0
                    && listaJugador.cabeza.next.next.next.getPokemon().getHitPoints() <= 0) {

                esperarSegundos(1000, listaJugador.cabeza.next.getPokemon().getNombreP() + " ha sido derrotado. CPU ha ganado la batalla.");
            }
        } // SI SON DEL MISMO TIPO
        else if (listaCPU.cabeza.getPokemon().getTipo() == AGUA && listaJugador.cabeza.getPokemon().getTipo() == AGUA) {
            int HPJ = listaJugador.cabeza.next.getPokemon().getHitPoints() - listaCPU.cabeza.getPokemon().getAtaqueEspecial() - 14;//restamos vida de ataque
            listaJugador.cabeza.getPokemon().setHitPoints(HPJ);//actualizamos vida
            esperarSegundos(1000, listaJugador.cabeza.next.getPokemon().getNombreP() + " ha recibido: " + listaCPU.cabeza.getPokemon().getAtaqueEspecial() + " de daño especial");
            lblVidaRestante.setText(String.valueOf(HPJ + " HP"));
            lblVidaP2.setText(String.valueOf("Vida: " + HPJ));
            if (listaJugador.cabeza.next.getPokemon().getHitPoints() <= 0) {
                lblVidaRestante.setText("");
                lblVidaP2.setText("Derrotado");
                esperarSegundos(1000, listaJugador.cabeza.next.getPokemon().getNombreP() + " ha sido derrotado");
                panelAtaques.setVisible(false);
                panelSeleccionPokemon.setVisible(true);
                btnPokemonJ2.setVisible(false);
            }
            if (listaJugador.cabeza.getPokemon().getHitPoints() <= 0
                    && listaJugador.cabeza.next.getPokemon().getHitPoints() <= 0
                    && listaJugador.cabeza.next.next.getPokemon().getHitPoints() <= 0
                    && listaJugador.cabeza.next.next.next.getPokemon().getHitPoints() <= 0) {
                esperarSegundos(1000, listaJugador.cabeza.next.getPokemon().getNombreP() + " ha sido derrotado. CPU ha ganado la batalla.");
            }

        } else if (listaCPU.cabeza.getPokemon().getTipo() == FUEGO && listaJugador.cabeza.getPokemon().getTipo() == FUEGO) {
            int HPJ = listaJugador.cabeza.next.getPokemon().getHitPoints() - listaCPU.cabeza.getPokemon().getAtaqueEspecial() - 14;//restamos vida de ataque
            listaJugador.cabeza.getPokemon().setHitPoints(HPJ);//actualizamos vida
            esperarSegundos(1000, listaJugador.cabeza.next.getPokemon().getNombreP() + " ha recibido: " + listaCPU.cabeza.getPokemon().getAtaqueEspecial() + " de daño especial");
            lblVidaRestante.setText(String.valueOf(HPJ + " HP"));
            lblVidaP2.setText(String.valueOf("Vida: " + HPJ));
            if (listaJugador.cabeza.next.getPokemon().getHitPoints() <= 0) {
                lblVidaRestante.setText("");
                lblVidaP2.setText("Derrotado");
                esperarSegundos(1000, listaJugador.cabeza.next.getPokemon().getNombreP() + " ha sido derrotado");
                panelAtaques.setVisible(false);
                panelSeleccionPokemon.setVisible(true);
                btnPokemonJ2.setVisible(false);
            }
            if (listaJugador.cabeza.getPokemon().getHitPoints() <= 0
                    && listaJugador.cabeza.next.getPokemon().getHitPoints() <= 0
                    && listaJugador.cabeza.next.next.getPokemon().getHitPoints() <= 0
                    && listaJugador.cabeza.next.next.next.getPokemon().getHitPoints() <= 0) {
                esperarSegundos(1000, listaJugador.cabeza.next.getPokemon().getNombreP() + " ha sido derrotado. CPU ha ganado la batalla.");
            }
        } // SI NO SON COUNTER O SON NEUTRALES
        else {
            if (listaCPU.cabeza.getPokemon().getTipo() == FUEGO && listaJugador.cabeza.getPokemon().getTipo() == AGUA) {
                int HPJ = listaJugador.cabeza.next.getPokemon().getHitPoints() - listaCPU.cabeza.getPokemon().getAtaqueEspecial();//restamos vida de ataque
                listaJugador.cabeza.getPokemon().setHitPoints(HPJ);//actualizamos vida
                esperarSegundos(1000, listaJugador.cabeza.next.getPokemon().getNombreP() + " ha recibido: " + listaCPU.cabeza.getPokemon().getAtaqueEspecial() + " de daño");
                lblVidaRestante.setText(String.valueOf(HPJ + " HP"));
                lblVidaP2.setText(String.valueOf("Vida: " + HPJ));
                if (listaJugador.cabeza.next.getPokemon().getHitPoints() <= 0) {
                    lblVidaRestante.setText("");
                    lblVidaP2.setText("Derrotado");
                    esperarSegundos(1000, listaJugador.cabeza.next.getPokemon().getNombreP() + " ha sido derrotado");
                    panelAtaques.setVisible(false);
                    panelSeleccionPokemon.setVisible(true);
                    btnPokemonJ2.setVisible(false);
                }
                if (listaJugador.cabeza.getPokemon().getHitPoints() <= 0
                        && listaJugador.cabeza.next.getPokemon().getHitPoints() <= 0
                        && listaJugador.cabeza.next.next.getPokemon().getHitPoints() <= 0
                        && listaJugador.cabeza.next.next.next.getPokemon().getHitPoints() <= 0) {

                    esperarSegundos(1000, listaJugador.cabeza.next.getPokemon().getNombreP() + " ha sido derrotado. CPU ha ganado la batalla.");
                }
            }
        }
    }

    public void ataqueEspecialCPUBoton3() {
        esperarSegundos(1000, "");
        // DAÑO EN CASO DE HACER COUNTER
        if (listaCPU.cabeza.getPokemon().getTipo() == AGUA && listaJugador.cabeza.getPokemon().getTipo() == FUEGO) {
            int HPJ = listaJugador.cabeza.next.next.getPokemon().getHitPoints() - listaCPU.cabeza.getPokemon().getAtaqueEspecial() + 14;//restamos vida de ataque
            listaJugador.cabeza.next.next.getPokemon().setHitPoints(HPJ);//actualizamos vida
            esperarSegundos(1000, listaJugador.cabeza.next.next.getPokemon().getNombreP() + " ha recibido: " + listaCPU.cabeza.getPokemon().getAtaqueEspecial() + " de daño especial");
            lblVidaRestante.setText(String.valueOf(HPJ + " HP"));
            lblVidaP3.setText(String.valueOf("Vida: " + HPJ));
            if (listaJugador.cabeza.next.next.getPokemon().getHitPoints() <= 0) {
                esperarSegundos(1000, "");
                lblVidaRestante.setText("");
                lblVidaP3.setText("Derrotado");
                esperarSegundos(1000, listaJugador.cabeza.next.next.getPokemon().getNombreP() + " ha sido derrotado");
                panelAtaques.setVisible(false);
                panelSeleccionPokemon.setVisible(true);
                btnPokemonJ3.setVisible(false);
            }
            if (listaJugador.cabeza.getPokemon().getHitPoints() <= 0
                    && listaJugador.cabeza.next.getPokemon().getHitPoints() <= 0
                    && listaJugador.cabeza.next.next.getPokemon().getHitPoints() <= 0
                    && listaJugador.cabeza.next.next.next.getPokemon().getHitPoints() <= 0) {

                esperarSegundos(1000, listaJugador.cabeza.next.next.getPokemon().getNombreP() + " ha sido derrotado. CPU ha ganado la batalla.");

            }
        } // SEAN DEL MISMO TIPO
        else if (listaCPU.cabeza.getPokemon().getTipo() == AGUA && listaJugador.cabeza.getPokemon().getTipo() == AGUA) {
            int HPJ = listaJugador.cabeza.next.next.getPokemon().getHitPoints() - listaCPU.cabeza.getPokemon().getAtaqueEspecial() - 14;//restamos vida de ataque
            listaJugador.cabeza.next.next.getPokemon().setHitPoints(HPJ);//actualizamos vida
            esperarSegundos(1000, listaJugador.cabeza.next.next.getPokemon().getNombreP() + " ha recibido: " + listaCPU.cabeza.getPokemon().getAtaqueEspecial() + " de daño especial");
            lblVidaRestante.setText(String.valueOf(HPJ + " HP"));
            lblVidaP3.setText(String.valueOf("Vida: " + HPJ));
            if (listaJugador.cabeza.next.next.getPokemon().getHitPoints() <= 0) {
                esperarSegundos(1000, "");
                lblVidaRestante.setText("");
                lblVidaP3.setText("Derrotado");
                esperarSegundos(1000, listaJugador.cabeza.next.next.getPokemon().getNombreP() + " ha sido derrotado");
                panelAtaques.setVisible(false);
                panelSeleccionPokemon.setVisible(true);
                btnPokemonJ3.setVisible(false);
            }
            if (listaJugador.cabeza.getPokemon().getHitPoints() <= 0
                    && listaJugador.cabeza.next.getPokemon().getHitPoints() <= 0
                    && listaJugador.cabeza.next.next.getPokemon().getHitPoints() <= 0
                    && listaJugador.cabeza.next.next.next.getPokemon().getHitPoints() <= 0) {

                esperarSegundos(1000, listaJugador.cabeza.next.next.getPokemon().getNombreP() + " ha sido derrotado. CPU ha ganado la batalla.");

            }
        } else if (listaCPU.cabeza.getPokemon().getTipo() == FUEGO && listaJugador.cabeza.getPokemon().getTipo() == FUEGO) {
            int HPJ = listaJugador.cabeza.next.next.getPokemon().getHitPoints() - listaCPU.cabeza.getPokemon().getAtaqueEspecial() - 14;//restamos vida de ataque
            listaJugador.cabeza.next.next.getPokemon().setHitPoints(HPJ);//actualizamos vida
            esperarSegundos(1000, listaJugador.cabeza.next.next.getPokemon().getNombreP() + " ha recibido: " + listaCPU.cabeza.getPokemon().getAtaqueEspecial() + " de daño especial");
            lblVidaRestante.setText(String.valueOf(HPJ + " HP"));
            lblVidaP3.setText(String.valueOf("Vida: " + HPJ));
            if (listaJugador.cabeza.next.next.getPokemon().getHitPoints() <= 0) {
                esperarSegundos(1000, "");
                lblVidaRestante.setText("");
                lblVidaP3.setText("Derrotado");
                esperarSegundos(1000, listaJugador.cabeza.next.next.getPokemon().getNombreP() + " ha sido derrotado");
                panelAtaques.setVisible(false);
                panelSeleccionPokemon.setVisible(true);
                btnPokemonJ3.setVisible(false);
            }
            if (listaJugador.cabeza.getPokemon().getHitPoints() <= 0
                    && listaJugador.cabeza.next.getPokemon().getHitPoints() <= 0
                    && listaJugador.cabeza.next.next.getPokemon().getHitPoints() <= 0
                    && listaJugador.cabeza.next.next.next.getPokemon().getHitPoints() <= 0) {

                esperarSegundos(1000, listaJugador.cabeza.next.next.getPokemon().getNombreP() + " ha sido derrotado. CPU ha ganado la batalla.");

            }
        } // SI NO SON COUNTER O SON NEUTRALES
        else {
            int HPJ = listaJugador.cabeza.next.next.getPokemon().getHitPoints() - listaCPU.cabeza.getPokemon().getAtaqueEspecial() + 14;//restamos vida de ataque
            listaJugador.cabeza.next.next.getPokemon().setHitPoints(HPJ);//actualizamos vida
            esperarSegundos(1000, listaJugador.cabeza.next.next.getPokemon().getNombreP() + " ha recibido: " + listaCPU.cabeza.getPokemon().getAtaqueEspecial() + " de daño especial");
            lblVidaRestante.setText(String.valueOf(HPJ + " HP"));
            lblVidaP3.setText(String.valueOf("Vida: " + HPJ));
            if (listaJugador.cabeza.next.next.getPokemon().getHitPoints() <= 0) {
                esperarSegundos(1000, "");
                lblVidaRestante.setText("");
                lblVidaP3.setText("Derrotado");
                esperarSegundos(1000, listaJugador.cabeza.next.next.getPokemon().getNombreP() + " ha sido derrotado");
                panelAtaques.setVisible(false);
                panelSeleccionPokemon.setVisible(true);
                btnPokemonJ3.setVisible(false);
            }
            if (listaJugador.cabeza.getPokemon().getHitPoints() <= 0
                    && listaJugador.cabeza.next.getPokemon().getHitPoints() <= 0
                    && listaJugador.cabeza.next.next.getPokemon().getHitPoints() <= 0
                    && listaJugador.cabeza.next.next.next.getPokemon().getHitPoints() <= 0) {

                esperarSegundos(1000, listaJugador.cabeza.next.next.getPokemon().getNombreP() + " ha sido derrotado. CPU ha ganado la batalla.");

            }
        }
    }

    public void ataqueEspecialCPUBoton4() {
        esperarSegundos(1000, "");
        // DAÑO EN CASO DE HACER COUNTER
        if (listaCPU.cabeza.getPokemon().getTipo() == AGUA && listaJugador.cabeza.getPokemon().getTipo() == FUEGO) {
            int HPJ = listaJugador.cabeza.next.next.next.getPokemon().getHitPoints() - listaCPU.cabeza.getPokemon().getAtaqueEspecial() + 14;//restamos vida de ataque
            listaJugador.cabeza.next.next.next.getPokemon().setHitPoints(HPJ);//actualizamos vida
            esperarSegundos(1000, listaJugador.cabeza.next.next.next.getPokemon().getNombreP() + " ha recibido: " + listaCPU.cabeza.getPokemon().getAtaqueEspecial() + " de daño especial");
            lblVidaRestante.setText(String.valueOf(HPJ + " HP"));
            lblVidaP4.setText(String.valueOf("Vida: " + HPJ));
            if (listaJugador.cabeza.next.next.next.getPokemon().getHitPoints() <= 0) {
                lblVidaRestante.setText("");
                lblVidaP4.setText("Derrotado");
                esperarSegundos(1000, listaJugador.cabeza.next.next.next.getPokemon().getNombreP() + " ha sido derrotado");
                panelAtaques.setVisible(false);
                panelSeleccionPokemon.setVisible(true);
                btnPokemonJ4.setVisible(false);
            }
            if (listaJugador.cabeza.getPokemon().getHitPoints() <= 0
                    && listaJugador.cabeza.next.getPokemon().getHitPoints() <= 0
                    && listaJugador.cabeza.next.next.getPokemon().getHitPoints() <= 0
                    && listaJugador.cabeza.next.next.next.getPokemon().getHitPoints() <= 0) {
                esperarSegundos(1000, listaJugador.cabeza.next.next.next.getPokemon().getNombreP() + " ha sido derrotado. CPU ha ganado la batalla.");
            }
        } // SI SON DEL MISMO TIPO
        else if (listaCPU.cabeza.getPokemon().getTipo() == AGUA && listaJugador.cabeza.getPokemon().getTipo() == AGUA) {
            int HPJ = listaJugador.cabeza.next.next.next.getPokemon().getHitPoints() - listaCPU.cabeza.getPokemon().getAtaqueEspecial() - 14;//restamos vida de ataque
            listaJugador.cabeza.next.next.next.getPokemon().setHitPoints(HPJ);//actualizamos vida
            esperarSegundos(1000, listaJugador.cabeza.next.next.next.getPokemon().getNombreP() + " ha recibido: " + listaCPU.cabeza.getPokemon().getAtaqueEspecial() + " de daño especial");
            lblVidaRestante.setText(String.valueOf(HPJ + " HP"));
            lblVidaP4.setText(String.valueOf("Vida: " + HPJ));
            if (listaJugador.cabeza.next.next.next.getPokemon().getHitPoints() <= 0) {
                lblVidaRestante.setText("");
                lblVidaP4.setText("Derrotado");
                esperarSegundos(1000, listaJugador.cabeza.next.next.next.getPokemon().getNombreP() + " ha sido derrotado");
                panelAtaques.setVisible(false);
                panelSeleccionPokemon.setVisible(true);
                btnPokemonJ4.setVisible(false);
            }
            if (listaJugador.cabeza.getPokemon().getHitPoints() <= 0
                    && listaJugador.cabeza.next.getPokemon().getHitPoints() <= 0
                    && listaJugador.cabeza.next.next.getPokemon().getHitPoints() <= 0
                    && listaJugador.cabeza.next.next.next.getPokemon().getHitPoints() <= 0) {
                esperarSegundos(1000, listaJugador.cabeza.next.next.next.getPokemon().getNombreP() + " ha sido derrotado. CPU ha ganado la batalla.");
            }
        } else if (listaCPU.cabeza.getPokemon().getTipo() == FUEGO && listaJugador.cabeza.getPokemon().getTipo() == FUEGO) {
            int HPJ = listaJugador.cabeza.next.next.next.getPokemon().getHitPoints() - listaCPU.cabeza.getPokemon().getAtaqueEspecial() - 14;//restamos vida de ataque
            listaJugador.cabeza.next.next.next.getPokemon().setHitPoints(HPJ);//actualizamos vida
            esperarSegundos(1000, listaJugador.cabeza.next.next.next.getPokemon().getNombreP() + " ha recibido: " + listaCPU.cabeza.getPokemon().getAtaqueEspecial() + " de daño especial");
            lblVidaRestante.setText(String.valueOf(HPJ + " HP"));
            lblVidaP4.setText(String.valueOf("Vida: " + HPJ));
            if (listaJugador.cabeza.next.next.next.getPokemon().getHitPoints() <= 0) {
                lblVidaRestante.setText("");
                lblVidaP4.setText("Derrotado");
                esperarSegundos(1000, listaJugador.cabeza.next.next.next.getPokemon().getNombreP() + " ha sido derrotado");
                panelAtaques.setVisible(false);
                panelSeleccionPokemon.setVisible(true);
                btnPokemonJ4.setVisible(false);
            }
            if (listaJugador.cabeza.getPokemon().getHitPoints() <= 0
                    && listaJugador.cabeza.next.getPokemon().getHitPoints() <= 0
                    && listaJugador.cabeza.next.next.getPokemon().getHitPoints() <= 0
                    && listaJugador.cabeza.next.next.next.getPokemon().getHitPoints() <= 0) {
                esperarSegundos(1000, listaJugador.cabeza.next.next.next.getPokemon().getNombreP() + " ha sido derrotado. CPU ha ganado la batalla.");
            }
        } // SI NO SON COUNTER O SON NEUTRALES
        else {
            int HPJ = listaJugador.cabeza.next.next.next.getPokemon().getHitPoints() - listaCPU.cabeza.getPokemon().getAtaqueEspecial();//restamos vida de ataque
            listaJugador.cabeza.next.next.next.getPokemon().setHitPoints(HPJ);//actualizamos vida
            esperarSegundos(1000, listaJugador.cabeza.next.next.next.getPokemon().getNombreP() + " ha recibido: " + listaCPU.cabeza.getPokemon().getAtaqueEspecial() + " de daño");
            lblVidaRestante.setText(String.valueOf(HPJ + " HP"));
            lblVidaP4.setText(String.valueOf("Vida: " + HPJ));
            if (listaJugador.cabeza.next.next.next.getPokemon().getHitPoints() <= 0) {
                lblVidaRestante.setText("");
                lblVidaP4.setText("Derrotado");
                esperarSegundos(1000, listaJugador.cabeza.next.next.next.getPokemon().getNombreP() + " ha sido derrotado");
                panelAtaques.setVisible(false);
                panelSeleccionPokemon.setVisible(true);
                btnPokemonJ4.setVisible(false);
            }
            if (listaJugador.cabeza.getPokemon().getHitPoints() <= 0
                    && listaJugador.cabeza.next.getPokemon().getHitPoints() <= 0
                    && listaJugador.cabeza.next.next.getPokemon().getHitPoints() <= 0
                    && listaJugador.cabeza.next.next.next.getPokemon().getHitPoints() <= 0) {
                esperarSegundos(1000, listaJugador.cabeza.next.next.next.getPokemon().getNombreP() + " ha sido derrotado. CPU ha ganado la batalla.");
            }
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */

        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BatallaPokemon.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BatallaPokemon.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BatallaPokemon.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BatallaPokemon.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new BatallaPokemon().setVisible(true);

            }
        });

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BotonArceus;
    private javax.swing.JButton BotonBlastoise;
    private javax.swing.JButton BotonBlaziken;
    private javax.swing.JButton BotonCharizard;
    private javax.swing.JButton BotonDoduo;
    private javax.swing.JButton BotonGyarados;
    private javax.swing.JButton BotonLapras;
    private javax.swing.JButton BotonMagmortar;
    private javax.swing.JButton BotonSnorlax;
    private javax.swing.JButton botonInicioBatalla;
    private javax.swing.JButton botonSalirSeleccion;
    private javax.swing.JButton botonTexto;
    private javax.swing.JButton btnAtaque;
    private javax.swing.JButton btnAtaqueEspecial;
    private javax.swing.JButton btnCambiarPokemon;
    private javax.swing.JButton btnDefensa;
    private javax.swing.JButton btnDefensaEspecial;
    private javax.swing.JButton btnPokemonJ1;
    private javax.swing.JButton btnPokemonJ2;
    private javax.swing.JButton btnPokemonJ3;
    private javax.swing.JButton btnPokemonJ4;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel lblArceus;
    private javax.swing.JLabel lblArceusCPU;
    private javax.swing.JLabel lblArceusPeleando;
    private javax.swing.JLabel lblArceusimg;
    private javax.swing.JLabel lblBatalla;
    private javax.swing.JLabel lblBlastoise;
    private javax.swing.JLabel lblBlastoiseCPU;
    private javax.swing.JLabel lblBlastoisePeleando;
    private javax.swing.JLabel lblBlastoiseimg;
    private javax.swing.JLabel lblBlaziken;
    private javax.swing.JLabel lblBlazikenCPU;
    private javax.swing.JLabel lblBlazikenPeleando;
    private javax.swing.JLabel lblBlazikenimg;
    private javax.swing.JLabel lblCharizard;
    private javax.swing.JLabel lblCharizardCPU;
    private javax.swing.JLabel lblCharizardPeleando;
    private javax.swing.JLabel lblCharizardimg;
    private javax.swing.JLabel lblDoduo;
    private javax.swing.JLabel lblDoduoCPU;
    private javax.swing.JLabel lblDoduoPeleando;
    private javax.swing.JLabel lblDoduoimg;
    private javax.swing.JLabel lblFotoPoke1;
    private javax.swing.JLabel lblFotoPoke2;
    private javax.swing.JLabel lblFotoPoke3;
    private javax.swing.JLabel lblFotoPoke4;
    private javax.swing.JLabel lblGyarados;
    private javax.swing.JLabel lblGyaradosCPU;
    private javax.swing.JLabel lblGyaradosPeleando;
    private javax.swing.JLabel lblGyaradosimg;
    private javax.swing.JLabel lblLapras;
    private javax.swing.JLabel lblLaprasCPU;
    private javax.swing.JLabel lblLaprasPeleando;
    private javax.swing.JLabel lblLaprasimg;
    private javax.swing.JLabel lblMagmortar;
    private javax.swing.JLabel lblMagmortarCPU;
    private javax.swing.JLabel lblMagmortarPeleando;
    private javax.swing.JLabel lblMagmotarimg;
    private javax.swing.JLabel lblPokeActualCPU;
    private javax.swing.JLabel lblPokeActualJugador;
    private javax.swing.JLabel lblPokemon1;
    private javax.swing.JLabel lblPokemon2;
    private javax.swing.JLabel lblPokemon3;
    private javax.swing.JLabel lblPokemon4;
    private javax.swing.JLabel lblSnorlax;
    private javax.swing.JLabel lblSnorlaxCPU;
    private javax.swing.JLabel lblSnorlaxPeleando;
    private javax.swing.JLabel lblSnorlaximg;
    private javax.swing.JLabel lblTexto;
    private javax.swing.JLabel lblVidaP1;
    private javax.swing.JLabel lblVidaP2;
    private javax.swing.JLabel lblVidaP3;
    private javax.swing.JLabel lblVidaP4;
    private javax.swing.JLabel lblVidaRestante;
    private javax.swing.JLabel lblVidaRestanteCPU;
    private javax.swing.JButton mostrarPokedex;
    private javax.swing.JPanel panelAtaques;
    private javax.swing.JPanel panelPokedex;
    private javax.swing.JPanel panelSeleccionPokemon;
    private javax.swing.JPanel pnlFondo;
    // End of variables declaration//GEN-END:variables
}
